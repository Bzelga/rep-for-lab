// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class ConferenceClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Prelast.GraphQL.State.ConferenceClientStoreAccessor> AddConferenceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Prelast.GraphQL.State.ConferenceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameDevMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateDevMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelDevelMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangePriceMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGameMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGameMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelNextPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelPrevPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithPagingQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesNextPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesPrevPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreNextPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenrePrevPageQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithPagingQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Prelast.GraphQL.State.ConferenceClientStoreAccessor>("ConferenceClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ConferenceClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult>, global::Prelast.GraphQL.State.ChangeNameDevResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangeNameDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>, global::Prelast.GraphQL.State.ChangeNameDevBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangeNameDevResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangeNameDevMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangeNameDevMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult>, global::Prelast.GraphQL.State.CreateDevResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>, global::Prelast.GraphQL.State.CreateDevBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateDevResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateDevMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateDevMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult>, global::Prelast.GraphQL.State.DelDevelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelDevelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>, global::Prelast.GraphQL.State.DelDevelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelDevelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelDevelMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelDevelMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelDevelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult>, global::Prelast.GraphQL.State.ChangePriceResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangePriceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>, global::Prelast.GraphQL.State.ChangePriceBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangePriceResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangePriceMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangePriceMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangePriceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult>, global::Prelast.GraphQL.State.CreateGameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>, global::Prelast.GraphQL.State.CreateGameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateGameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateGameMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateGameMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult>, global::Prelast.GraphQL.State.DelGameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>, global::Prelast.GraphQL.State.DelGameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelGameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelGameMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelGameMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult>, global::Prelast.GraphQL.State.ChangeNameGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangeNameGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>, global::Prelast.GraphQL.State.ChangeNameGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangeNameGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangeNameGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangeNameGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult>, global::Prelast.GraphQL.State.CreateGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>, global::Prelast.GraphQL.State.CreateGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult>, global::Prelast.GraphQL.State.DelGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>, global::Prelast.GraphQL.State.DelGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult>, global::Prelast.GraphQL.State.GetDevelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>, global::Prelast.GraphQL.State.GetDevelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelNextPageResult>, global::Prelast.GraphQL.State.GetDevelNextPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelNextPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelNextPageResult>, global::Prelast.GraphQL.State.GetDevelNextPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelNextPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelNextPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelNextPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelNextPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelNextPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelPrevPageResult>, global::Prelast.GraphQL.State.GetDevelPrevPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelPrevPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelPrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelPrevPageResult>, global::Prelast.GraphQL.State.GetDevelPrevPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelPrevPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelPrevPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelPrevPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelPrevPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelPrevPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelPrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult>, global::Prelast.GraphQL.State.GetDevelWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>, global::Prelast.GraphQL.State.GetDevelWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithPagingResult>, global::Prelast.GraphQL.State.GetDevelWithPagingResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithPagingResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelWithPagingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithPagingResult>, global::Prelast.GraphQL.State.GetDevelWithPagingBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelWithPagingResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithPagingResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithPagingResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelWithPagingQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelWithPagingQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithPagingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult>, global::Prelast.GraphQL.State.GetGamesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>, global::Prelast.GraphQL.State.GetGamesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesNextPageResult>, global::Prelast.GraphQL.State.GetGamesNextPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesNextPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesNextPageResult>, global::Prelast.GraphQL.State.GetGamesNextPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesNextPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesNextPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesNextPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesNextPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesNextPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesPrevPageResult>, global::Prelast.GraphQL.State.GetGamesPrevPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesPrevPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesPrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesPrevPageResult>, global::Prelast.GraphQL.State.GetGamesPrevPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesPrevPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesPrevPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesPrevPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesPrevPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesPrevPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesPrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult>, global::Prelast.GraphQL.State.GetGamesWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>, global::Prelast.GraphQL.State.GetGamesWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult>, global::Prelast.GraphQL.State.GetGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>, global::Prelast.GraphQL.State.GetGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreNextPageResult>, global::Prelast.GraphQL.State.GetGenreNextPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreNextPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreNextPageResult>, global::Prelast.GraphQL.State.GetGenreNextPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreNextPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreNextPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreNextPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreNextPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreNextPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreNextPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenrePrevPageResult>, global::Prelast.GraphQL.State.GetGenrePrevPageResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenrePrevPageResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenrePrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenrePrevPageResult>, global::Prelast.GraphQL.State.GetGenrePrevPageBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenrePrevPageResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenrePrevPageResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenrePrevPageResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenrePrevPageQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenrePrevPageQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenrePrevPageQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult>, global::Prelast.GraphQL.State.GetGenreWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>, global::Prelast.GraphQL.State.GetGenreWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithPagingResult>, global::Prelast.GraphQL.State.GetGenreWithPagingResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithPagingResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreWithPagingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithPagingResult>, global::Prelast.GraphQL.State.GetGenreWithPagingBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreWithPagingResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithPagingResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithPagingResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreWithPagingQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreWithPagingQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithPagingQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Prelast.GraphQL.State.ConferenceClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ConferenceClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IConferenceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ConferenceClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Prelast.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResult : global::System.IEquatable<ChangeNameDevResult>, IChangeNameDevResult
    {
        public ChangeNameDevResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById?>? changeDevNameById)
        {
            ChangeDevNameById = changeDevNameById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById?>? ChangeDevNameById { get; }

        public virtual global::System.Boolean Equals(ChangeNameDevResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ChangeDevNameById, other.ChangeDevNameById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameDevResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeDevNameById != null)
                {
                    foreach (var ChangeDevNameById_elm in ChangeDevNameById)
                    {
                        if (ChangeDevNameById_elm != null)
                        {
                            hash ^= 397 * ChangeDevNameById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDev_ChangeDevNameById_Developers : global::System.IEquatable<ChangeNameDev_ChangeDevNameById_Developers>, IChangeNameDev_ChangeDevNameById_Developers
    {
        public ChangeNameDev_ChangeDevNameById_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(ChangeNameDev_ChangeDevNameById_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameDev_ChangeDevNameById_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDevResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById?>? ChangeDevNameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDevelopersInfo
    {
        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDev_ChangeDevNameById : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDev_ChangeDevNameById_Developers : IChangeNameDev_ChangeDevNameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResult : global::System.IEquatable<CreateDevResult>, ICreateDevResult
    {
        public CreateDevResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateDev_CreateDeveloper?>? createDeveloper)
        {
            CreateDeveloper = createDeveloper;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateDev_CreateDeveloper?>? CreateDeveloper { get; }

        public virtual global::System.Boolean Equals(CreateDevResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CreateDeveloper, other.CreateDeveloper));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDevResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateDeveloper != null)
                {
                    foreach (var CreateDeveloper_elm in CreateDeveloper)
                    {
                        if (CreateDeveloper_elm != null)
                        {
                            hash ^= 397 * CreateDeveloper_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDev_CreateDeveloper_Developers : global::System.IEquatable<CreateDev_CreateDeveloper_Developers>, ICreateDev_CreateDeveloper_Developers
    {
        public CreateDev_CreateDeveloper_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(CreateDev_CreateDeveloper_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDev_CreateDeveloper_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDevResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateDev_CreateDeveloper?>? CreateDeveloper { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDev_CreateDeveloper : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDev_CreateDeveloper_Developers : ICreateDev_CreateDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResult : global::System.IEquatable<DelDevelResult>, IDelDevelResult
    {
        public DelDevelResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelDevel_DeleteDevById?>? deleteDevById)
        {
            DeleteDevById = deleteDevById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelDevel_DeleteDevById?>? DeleteDevById { get; }

        public virtual global::System.Boolean Equals(DelDevelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(DeleteDevById, other.DeleteDevById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelDevelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteDevById != null)
                {
                    foreach (var DeleteDevById_elm in DeleteDevById)
                    {
                        if (DeleteDevById_elm != null)
                        {
                            hash ^= 397 * DeleteDevById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevel_DeleteDevById_Developers : global::System.IEquatable<DelDevel_DeleteDevById_Developers>, IDelDevel_DeleteDevById_Developers
    {
        public DelDevel_DeleteDevById_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(DelDevel_DeleteDevById_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelDevel_DeleteDevById_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevelResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelDevel_DeleteDevById?>? DeleteDevById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevel_DeleteDevById : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevel_DeleteDevById_Developers : IDelDevel_DeleteDevById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResult : global::System.IEquatable<ChangePriceResult>, IChangePriceResult
    {
        public ChangePriceResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById?>? changeGamePriceById)
        {
            ChangeGamePriceById = changeGamePriceById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById?>? ChangeGamePriceById { get; }

        public virtual global::System.Boolean Equals(ChangePriceResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ChangeGamePriceById, other.ChangeGamePriceById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePriceResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeGamePriceById != null)
                {
                    foreach (var ChangeGamePriceById_elm in ChangeGamePriceById)
                    {
                        if (ChangeGamePriceById_elm != null)
                        {
                            hash ^= 397 * ChangeGamePriceById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Games : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Games>, IChangePrice_ChangeGamePriceById_Games
    {
        public ChangePrice_ChangeGamePriceById_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Genre_Genre : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Genre_Genre>, IChangePrice_ChangeGamePriceById_Genre_Genre
    {
        public ChangePrice_ChangeGamePriceById_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Developer_Developers : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Developer_Developers>, IChangePrice_ChangeGamePriceById_Developer_Developers
    {
        public ChangePrice_ChangeGamePriceById_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePriceResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById?>? ChangeGamePriceById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGamesInfo
    {
        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Games : IChangePrice_ChangeGamePriceById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Genre_Genre : IChangePrice_ChangeGamePriceById_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Developer_Developers : IChangePrice_ChangeGamePriceById_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResult : global::System.IEquatable<CreateGameResult>, ICreateGameResult
    {
        public CreateGameResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId?>? createGameWithDeveloperGenreId)
        {
            CreateGameWithDeveloperGenreId = createGameWithDeveloperGenreId;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId?>? CreateGameWithDeveloperGenreId { get; }

        public virtual global::System.Boolean Equals(CreateGameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CreateGameWithDeveloperGenreId, other.CreateGameWithDeveloperGenreId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateGameWithDeveloperGenreId != null)
                {
                    foreach (var CreateGameWithDeveloperGenreId_elm in CreateGameWithDeveloperGenreId)
                    {
                        if (CreateGameWithDeveloperGenreId_elm != null)
                        {
                            hash ^= 397 * CreateGameWithDeveloperGenreId_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Games : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Games>, ICreateGame_CreateGameWithDeveloperGenreId_Games
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre>, ICreateGame_CreateGameWithDeveloperGenreId_Genre_Genre
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers>, ICreateGame_CreateGameWithDeveloperGenreId_Developer_Developers
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGameResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId?>? CreateGameWithDeveloperGenreId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Games : ICreateGame_CreateGameWithDeveloperGenreId
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Genre_Genre : ICreateGame_CreateGameWithDeveloperGenreId_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Developer_Developers : ICreateGame_CreateGameWithDeveloperGenreId_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResult : global::System.IEquatable<DelGameResult>, IDelGameResult
    {
        public DelGameResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGame_DeleteGameById?>? deleteGameById)
        {
            DeleteGameById = deleteGameById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGame_DeleteGameById?>? DeleteGameById { get; }

        public virtual global::System.Boolean Equals(DelGameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(DeleteGameById, other.DeleteGameById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteGameById != null)
                {
                    foreach (var DeleteGameById_elm in DeleteGameById)
                    {
                        if (DeleteGameById_elm != null)
                        {
                            hash ^= 397 * DeleteGameById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGame_DeleteGameById_Games : global::System.IEquatable<DelGame_DeleteGameById_Games>, IDelGame_DeleteGameById_Games
    {
        public DelGame_DeleteGameById_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(DelGame_DeleteGameById_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGame_DeleteGameById_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGame_DeleteGameById_Genre_Genre : global::System.IEquatable<DelGame_DeleteGameById_Genre_Genre>, IDelGame_DeleteGameById_Genre_Genre
    {
        public DelGame_DeleteGameById_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(DelGame_DeleteGameById_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGame_DeleteGameById_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGame_DeleteGameById_Developer_Developers : global::System.IEquatable<DelGame_DeleteGameById_Developer_Developers>, IDelGame_DeleteGameById_Developer_Developers
    {
        public DelGame_DeleteGameById_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(DelGame_DeleteGameById_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGame_DeleteGameById_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGameResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGame_DeleteGameById?>? DeleteGameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById_Games : IDelGame_DeleteGameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById_Genre_Genre : IDelGame_DeleteGameById_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGame_DeleteGameById_Developer_Developers : IDelGame_DeleteGameById_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResult : global::System.IEquatable<ChangeNameGenreResult>, IChangeNameGenreResult
    {
        public ChangeNameGenreResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById?>? changeGenreNameById)
        {
            ChangeGenreNameById = changeGenreNameById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById?>? ChangeGenreNameById { get; }

        public virtual global::System.Boolean Equals(ChangeNameGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ChangeGenreNameById, other.ChangeGenreNameById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeGenreNameById != null)
                {
                    foreach (var ChangeGenreNameById_elm in ChangeGenreNameById)
                    {
                        if (ChangeGenreNameById_elm != null)
                        {
                            hash ^= 397 * ChangeGenreNameById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenre_ChangeGenreNameById_Genre : global::System.IEquatable<ChangeNameGenre_ChangeGenreNameById_Genre>, IChangeNameGenre_ChangeGenreNameById_Genre
    {
        public ChangeNameGenre_ChangeGenreNameById_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ChangeNameGenre_ChangeGenreNameById_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameGenre_ChangeGenreNameById_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenreResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById?>? ChangeGenreNameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGenreInfo
    {
        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenre_ChangeGenreNameById : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenre_ChangeGenreNameById_Genre : IChangeNameGenre_ChangeGenreNameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResult : global::System.IEquatable<CreateGenreResult>, ICreateGenreResult
    {
        public CreateGenreResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGenre_CreateGenre?>? createGenre)
        {
            CreateGenre = createGenre;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGenre_CreateGenre?>? CreateGenre { get; }

        public virtual global::System.Boolean Equals(CreateGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CreateGenre, other.CreateGenre));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateGenre != null)
                {
                    foreach (var CreateGenre_elm in CreateGenre)
                    {
                        if (CreateGenre_elm != null)
                        {
                            hash ^= 397 * CreateGenre_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenre_CreateGenre_Genre : global::System.IEquatable<CreateGenre_CreateGenre_Genre>, ICreateGenre_CreateGenre_Genre
    {
        public CreateGenre_CreateGenre_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateGenre_CreateGenre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGenre_CreateGenre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenreResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGenre_CreateGenre?>? CreateGenre { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenre_CreateGenre : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenre_CreateGenre_Genre : ICreateGenre_CreateGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResult : global::System.IEquatable<DelGenreResult>, IDelGenreResult
    {
        public DelGenreResult(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGenre_DeleteGenreById?>? deleteGenreById)
        {
            DeleteGenreById = deleteGenreById;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGenre_DeleteGenreById?>? DeleteGenreById { get; }

        public virtual global::System.Boolean Equals(DelGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(DeleteGenreById, other.DeleteGenreById));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteGenreById != null)
                {
                    foreach (var DeleteGenreById_elm in DeleteGenreById)
                    {
                        if (DeleteGenreById_elm != null)
                        {
                            hash ^= 397 * DeleteGenreById_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenre_DeleteGenreById_Genre : global::System.IEquatable<DelGenre_DeleteGenreById_Genre>, IDelGenre_DeleteGenreById_Genre
    {
        public DelGenre_DeleteGenreById_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(DelGenre_DeleteGenreById_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGenre_DeleteGenreById_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenreResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGenre_DeleteGenreById?>? DeleteGenreById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenre_DeleteGenreById : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenre_DeleteGenreById_Genre : IDelGenre_DeleteGenreById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResult : global::System.IEquatable<GetDevelResult>, IGetDevelResult
    {
        public GetDevelResult(global::Prelast.GraphQL.IGetDevel_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevel_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevel_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevel_AllDeveloper_AllDeveloperConnection>, IGetDevel_AllDeveloper_AllDeveloperConnection
    {
        public GetDevel_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetDevel_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevel_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevel_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevel_AllDeveloper_Nodes_Developers>, IGetDevel_AllDeveloper_Nodes_Developers
    {
        public GetDevel_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevel_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevel_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelResult
    {
        public global::Prelast.GraphQL.IGetDevel_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_AllDeveloperConnection : IGetDevel_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_Nodes_Developers : IGetDevel_AllDeveloper_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageResult : global::System.IEquatable<GetDevelNextPageResult>, IGetDevelNextPageResult
    {
        public GetDevelNextPageResult(global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelNextPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelNextPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPage_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevelNextPage_AllDeveloper_AllDeveloperConnection>, IGetDevelNextPage_AllDeveloper_AllDeveloperConnection
    {
        public GetDevelNextPage_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes?>? nodes, global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetDevelNextPage_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelNextPage_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPage_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevelNextPage_AllDeveloper_Nodes_Developers>, IGetDevelNextPage_AllDeveloper_Nodes_Developers
    {
        public GetDevelNextPage_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevelNextPage_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelNextPage_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPage_AllDeveloper_PageInfo_PageInfo : global::System.IEquatable<GetDevelNextPage_AllDeveloper_PageInfo_PageInfo>, IGetDevelNextPage_AllDeveloper_PageInfo_PageInfo
    {
        public GetDevelNextPage_AllDeveloper_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetDevelNextPage_AllDeveloper_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelNextPage_AllDeveloper_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPageResult
    {
        public global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper_AllDeveloperConnection : IGetDevelNextPage_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper_Nodes_Developers : IGetDevelNextPage_AllDeveloper_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPage_AllDeveloper_PageInfo_PageInfo : IGetDevelNextPage_AllDeveloper_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageResult : global::System.IEquatable<GetDevelPrevPageResult>, IGetDevelPrevPageResult
    {
        public GetDevelPrevPageResult(global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelPrevPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelPrevPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPage_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevelPrevPage_AllDeveloper_AllDeveloperConnection>, IGetDevelPrevPage_AllDeveloper_AllDeveloperConnection
    {
        public GetDevelPrevPage_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes?>? nodes, global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetDevelPrevPage_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelPrevPage_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPage_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevelPrevPage_AllDeveloper_Nodes_Developers>, IGetDevelPrevPage_AllDeveloper_Nodes_Developers
    {
        public GetDevelPrevPage_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevelPrevPage_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelPrevPage_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo : global::System.IEquatable<GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo>, IGetDevelPrevPage_AllDeveloper_PageInfo_PageInfo
    {
        public GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPageResult
    {
        public global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper_AllDeveloperConnection : IGetDevelPrevPage_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper_Nodes_Developers : IGetDevelPrevPage_AllDeveloper_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPage_AllDeveloper_PageInfo_PageInfo : IGetDevelPrevPage_AllDeveloper_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResult : global::System.IEquatable<GetDevelWithFiltrResult>, IGetDevelWithFiltrResult
    {
        public GetDevelWithFiltrResult(global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection>, IGetDevelWithFiltr_AllDeveloper_AllDeveloperConnection
    {
        public GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltr_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevelWithFiltr_AllDeveloper_Nodes_Developers>, IGetDevelWithFiltr_AllDeveloper_Nodes_Developers
    {
        public GetDevelWithFiltr_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltr_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltr_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_AllDeveloperConnection : IGetDevelWithFiltr_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_Nodes_Developers : IGetDevelWithFiltr_AllDeveloper_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingResult : global::System.IEquatable<GetDevelWithPagingResult>, IGetDevelWithPagingResult
    {
        public GetDevelWithPagingResult(global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelWithPagingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithPagingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPaging_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevelWithPaging_AllDeveloper_AllDeveloperConnection>, IGetDevelWithPaging_AllDeveloper_AllDeveloperConnection
    {
        public GetDevelWithPaging_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes?>? nodes, global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetDevelWithPaging_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithPaging_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPaging_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevelWithPaging_AllDeveloper_Nodes_Developers>, IGetDevelWithPaging_AllDeveloper_Nodes_Developers
    {
        public GetDevelWithPaging_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevelWithPaging_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithPaging_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo : global::System.IEquatable<GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo>, IGetDevelWithPaging_AllDeveloper_PageInfo_PageInfo
    {
        public GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPagingResult
    {
        public global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper_AllDeveloperConnection : IGetDevelWithPaging_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper_Nodes_Developers : IGetDevelWithPaging_AllDeveloper_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPaging_AllDeveloper_PageInfo_PageInfo : IGetDevelWithPaging_AllDeveloper_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResult : global::System.IEquatable<GetGamesResult>, IGetGamesResult
    {
        public GetGamesResult(global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? nodes, global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Games>, IGetGames_AllGameWithDevGerne_Nodes_Games
    {
        public GetGames_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_PageInfo_PageInfo : global::System.IEquatable<GetGames_AllGameWithDevGerne_PageInfo_PageInfo>, IGetGames_AllGameWithDevGerne_PageInfo_PageInfo
    {
        public GetGames_AllGameWithDevGerne_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGames_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGames_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesResult
    {
        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGames_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Games : IGetGames_AllGameWithDevGerne_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_PageInfo_PageInfo : IGetGames_AllGameWithDevGerne_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageResult : global::System.IEquatable<GetGamesNextPageResult>, IGetGamesNextPageResult
    {
        public GetGamesNextPageResult(global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes?>? nodes, global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPage_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGamesNextPage_AllGameWithDevGerne_Nodes_Games>, IGetGamesNextPage_AllGameWithDevGerne_Nodes_Games
    {
        public GetGamesNextPage_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPage_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPage_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo : global::System.IEquatable<GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo>, IGetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo
    {
        public GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPageResult
    {
        public global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGamesNextPage_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes_Games : IGetGamesNextPage_AllGameWithDevGerne_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo : IGetGamesNextPage_AllGameWithDevGerne_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGamesNextPage_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPage_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGamesNextPage_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageResult : global::System.IEquatable<GetGamesPrevPageResult>, IGetGamesPrevPageResult
    {
        public GetGamesPrevPageResult(global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes?>? nodes, global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games>, IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Games
    {
        public GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo : global::System.IEquatable<GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo>, IGetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo
    {
        public GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPageResult
    {
        public global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGamesPrevPage_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Games : IGetGamesPrevPage_AllGameWithDevGerne_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo : IGetGamesPrevPage_AllGameWithDevGerne_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGamesPrevPage_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResult : global::System.IEquatable<GetGamesWithFiltrResult>, IGetGamesWithFiltrResult
    {
        public GetGamesWithFiltrResult(global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGamesWithFiltr_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResult : global::System.IEquatable<GetGenreResult>, IGetGenreResult
    {
        public GetGenreResult(global::Prelast.GraphQL.IGetGenre_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenre_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenre_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenre_AllGenre_AllGenreConnection>, IGetGenre_AllGenre_AllGenreConnection
    {
        public GetGenre_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGenre_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenre_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenre_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenre_AllGenre_Nodes_Genre>, IGetGenre_AllGenre_Nodes_Genre
    {
        public GetGenre_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenre_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenre_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreResult
    {
        public global::Prelast.GraphQL.IGetGenre_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_AllGenreConnection : IGetGenre_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_Nodes_Genre : IGetGenre_AllGenre_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageResult : global::System.IEquatable<GetGenreNextPageResult>, IGetGenreNextPageResult
    {
        public GetGenreNextPageResult(global::Prelast.GraphQL.IGetGenreNextPage_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenreNextPage_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreNextPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreNextPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPage_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenreNextPage_AllGenre_AllGenreConnection>, IGetGenreNextPage_AllGenre_AllGenreConnection
    {
        public GetGenreNextPage_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes?>? nodes, global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGenreNextPage_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreNextPage_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPage_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenreNextPage_AllGenre_Nodes_Genre>, IGetGenreNextPage_AllGenre_Nodes_Genre
    {
        public GetGenreNextPage_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenreNextPage_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreNextPage_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPage_AllGenre_PageInfo_PageInfo : global::System.IEquatable<GetGenreNextPage_AllGenre_PageInfo_PageInfo>, IGetGenreNextPage_AllGenre_PageInfo_PageInfo
    {
        public GetGenreNextPage_AllGenre_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGenreNextPage_AllGenre_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreNextPage_AllGenre_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPageResult
    {
        public global::Prelast.GraphQL.IGetGenreNextPage_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre_AllGenreConnection : IGetGenreNextPage_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre_Nodes_Genre : IGetGenreNextPage_AllGenre_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPage_AllGenre_PageInfo_PageInfo : IGetGenreNextPage_AllGenre_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageResult : global::System.IEquatable<GetGenrePrevPageResult>, IGetGenrePrevPageResult
    {
        public GetGenrePrevPageResult(global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenrePrevPageResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenrePrevPageResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPage_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenrePrevPage_AllGenre_AllGenreConnection>, IGetGenrePrevPage_AllGenre_AllGenreConnection
    {
        public GetGenrePrevPage_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes?>? nodes, global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGenrePrevPage_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenrePrevPage_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPage_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenrePrevPage_AllGenre_Nodes_Genre>, IGetGenrePrevPage_AllGenre_Nodes_Genre
    {
        public GetGenrePrevPage_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenrePrevPage_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenrePrevPage_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPage_AllGenre_PageInfo_PageInfo : global::System.IEquatable<GetGenrePrevPage_AllGenre_PageInfo_PageInfo>, IGetGenrePrevPage_AllGenre_PageInfo_PageInfo
    {
        public GetGenrePrevPage_AllGenre_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGenrePrevPage_AllGenre_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenrePrevPage_AllGenre_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPageResult
    {
        public global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre_AllGenreConnection : IGetGenrePrevPage_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre_Nodes_Genre : IGetGenrePrevPage_AllGenre_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPage_AllGenre_PageInfo_PageInfo : IGetGenrePrevPage_AllGenre_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResult : global::System.IEquatable<GetGenreWithFiltrResult>, IGetGenreWithFiltrResult
    {
        public GetGenreWithFiltrResult(global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltr_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenreWithFiltr_AllGenre_AllGenreConnection>, IGetGenreWithFiltr_AllGenre_AllGenreConnection
    {
        public GetGenreWithFiltr_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltr_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltr_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltr_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenreWithFiltr_AllGenre_Nodes_Genre>, IGetGenreWithFiltr_AllGenre_Nodes_Genre
    {
        public GetGenreWithFiltr_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltr_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltr_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_AllGenreConnection : IGetGenreWithFiltr_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_Nodes_Genre : IGetGenreWithFiltr_AllGenre_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingResult : global::System.IEquatable<GetGenreWithPagingResult>, IGetGenreWithPagingResult
    {
        public GetGenreWithPagingResult(global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreWithPagingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithPagingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPaging_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenreWithPaging_AllGenre_AllGenreConnection>, IGetGenreWithPaging_AllGenre_AllGenreConnection
    {
        public GetGenreWithPaging_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes?>? nodes, global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetGenreWithPaging_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithPaging_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPaging_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenreWithPaging_AllGenre_Nodes_Genre>, IGetGenreWithPaging_AllGenre_Nodes_Genre
    {
        public GetGenreWithPaging_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenreWithPaging_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithPaging_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPaging_AllGenre_PageInfo_PageInfo : global::System.IEquatable<GetGenreWithPaging_AllGenre_PageInfo_PageInfo>, IGetGenreWithPaging_AllGenre_PageInfo_PageInfo
    {
        public GetGenreWithPaging_AllGenre_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetGenreWithPaging_AllGenre_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithPaging_AllGenre_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPagingResult
    {
        public global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre_AllGenreConnection : IGetGenreWithPaging_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre_Nodes_Genre : IGetGenreWithPaging_AllGenre_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPaging_AllGenre_PageInfo_PageInfo : IGetGenreWithPaging_AllGenre_PageInfo
    {
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangeNameDevMutationDocument()
        {
        }

        public static ChangeNameDevMutationDocument Instance { get; } = new ChangeNameDevMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c15f05fa37ca0e39489268213d41c9b6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevMutation : global::Prelast.GraphQL.IChangeNameDevMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangeNameDevResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ChangeNameDevMutation(global::StrawberryShake.IOperationExecutor<IChangeNameDevResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangeNameDevResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id, global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangeNameDevMutationDocument.Instance.Hash.Value, name: "ChangeNameDev", document: ChangeNameDevMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDevMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateDevMutationDocument()
        {
        }

        public static CreateDevMutationDocument Instance { get; } = new CreateDevMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x28, 0x24, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1c1cf7c5a4e3dfc5f57f407353211b71");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevMutation : global::Prelast.GraphQL.ICreateDevMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateDevResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CreateDevMutation(global::StrawberryShake.IOperationExecutor<ICreateDevResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateDevResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDevResult>> ExecuteAsync(global::System.String devName, global::System.String countryName, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(devName, countryName);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDevResult>> Watch(global::System.String devName, global::System.String countryName, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(devName, countryName);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String devName, global::System.String countryName)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("devName", FormatDevName(devName));
            variables.Add("countryName", FormatCountryName(countryName));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateDevMutationDocument.Instance.Hash.Value, name: "CreateDev", document: CreateDevMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDevName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCountryName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDevMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDevResult>> ExecuteAsync(global::System.String devName, global::System.String countryName, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDevResult>> Watch(global::System.String devName, global::System.String countryName, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelMutationDocument : global::StrawberryShake.IDocument
    {
        private DelDevelMutationDocument()
        {
        }

        public static DelDevelMutationDocument Instance { get; } = new DelDevelMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x24, 0x64, 0x65, 0x76, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x76, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "48a91755bb5834125ccc24b35da74f77");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelMutation : global::Prelast.GraphQL.IDelDevelMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelDevelResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelDevelMutation(global::StrawberryShake.IOperationExecutor<IDelDevelResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelDevelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelDevelResult>> ExecuteAsync(global::System.Int32 devId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(devId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelDevelResult>> Watch(global::System.Int32 devId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(devId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 devId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("devId", FormatDevId(devId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelDevelMutationDocument.Instance.Hash.Value, name: "DelDevel", document: DelDevelMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDevId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevelMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelDevelResult>> ExecuteAsync(global::System.Int32 devId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelDevelResult>> Watch(global::System.Int32 devId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangePriceMutationDocument()
        {
        }

        public static ChangePriceMutationDocument Instance { get; } = new ChangePriceMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x28, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fb555b9054d3e40ad24c85aa964deb66");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceMutation : global::Prelast.GraphQL.IChangePriceMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangePriceResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        public ChangePriceMutation(global::StrawberryShake.IOperationExecutor<IChangePriceResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangePriceResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangePriceResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Double price, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(gameId, price);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangePriceResult>> Watch(global::System.Int32 gameId, global::System.Double price, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(gameId, price);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 gameId, global::System.Double price)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("gameId", FormatGameId(gameId));
            variables.Add("price", FormatPrice(price));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangePriceMutationDocument.Instance.Hash.Value, name: "ChangePrice", document: ChangePriceMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatGameId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePriceMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangePriceResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Double price, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangePriceResult>> Watch(global::System.Int32 gameId, global::System.Double price, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateGameMutationDocument()
        {
        }

        public static CreateGameMutationDocument Instance { get; } = new CreateGameMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x64, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x44, 0x65, 0x76, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bd26801300232cb3ee7bcc1e990745a3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameMutation : global::Prelast.GraphQL.ICreateGameMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateGameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public CreateGameMutation(global::StrawberryShake.IOperationExecutor<ICreateGameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateGameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGameResult>> ExecuteAsync(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, price, idGenre, idDev);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGameResult>> Watch(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, price, idGenre, idDev);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("price", FormatPrice(price));
            variables.Add("idGenre", FormatIdGenre(idGenre));
            variables.Add("idDev", FormatIdDev(idDev));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateGameMutationDocument.Instance.Hash.Value, name: "CreateGame", document: CreateGameMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        private global::System.Object? FormatIdGenre(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatIdDev(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGameMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGameResult>> ExecuteAsync(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGameResult>> Watch(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameMutationDocument : global::StrawberryShake.IDocument
    {
        private DelGameMutationDocument()
        {
        }

        public static DelGameMutationDocument Instance { get; } = new DelGameMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1a8ab4651f2e48523c7906413510ba74");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameMutation : global::Prelast.GraphQL.IDelGameMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelGameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelGameMutation(global::StrawberryShake.IOperationExecutor<IDelGameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelGameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGameResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(gameId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGameResult>> Watch(global::System.Int32 gameId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(gameId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 gameId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("gameId", FormatGameId(gameId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelGameMutationDocument.Instance.Hash.Value, name: "DelGame", document: DelGameMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatGameId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGameMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGameResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGameResult>> Watch(global::System.Int32 gameId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangeNameGenreMutationDocument()
        {
        }

        public static ChangeNameGenreMutationDocument Instance { get; } = new ChangeNameGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8992e07cd09e54f6ce57771bcd8f3f97");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreMutation : global::Prelast.GraphQL.IChangeNameGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangeNameGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ChangeNameGenreMutation(global::StrawberryShake.IOperationExecutor<IChangeNameGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangeNameGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id, global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangeNameGenreMutationDocument.Instance.Hash.Value, name: "ChangeNameGenre", document: ChangeNameGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateGenreMutationDocument()
        {
        }

        public static CreateGenreMutationDocument Instance { get; } = new CreateGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x67, 0x65, 0x72, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8f34268866fef68412d4b9d16237c1a4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreMutation : global::Prelast.GraphQL.ICreateGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CreateGenreMutation(global::StrawberryShake.IOperationExecutor<ICreateGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGenreResult>> ExecuteAsync(global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGenreResult>> Watch(global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateGenreMutationDocument.Instance.Hash.Value, name: "CreateGenre", document: CreateGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGenreResult>> ExecuteAsync(global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGenreResult>> Watch(global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private DelGenreMutationDocument()
        {
        }

        public static DelGenreMutationDocument Instance { get; } = new DelGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "65215ac25cffbf3275bfc32697e1fba1");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreMutation : global::Prelast.GraphQL.IDelGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelGenreMutation(global::StrawberryShake.IOperationExecutor<IDelGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGenreResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelGenreMutationDocument.Instance.Hash.Value, name: "DelGenre", document: DelGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGenreResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper(order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelQueryDocument()
        {
        }

        public static GetDevelQueryDocument Instance { get; } = new GetDevelQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8a993ccad7f9ab7f4a738af0997bbb26");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper(order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelQuery : global::Prelast.GraphQL.IGetDevelQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelResult> _operationExecutor;
        public GetDevelQuery(global::StrawberryShake.IOperationExecutor<IGetDevelResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelQueryDocument.Instance.Hash.Value, name: "GetDevel", document: GetDevelQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper(order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevelNextPage GraphQL operation
    /// <code>
    /// query GetDevelNextPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(first: $countItem, after: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelNextPageQueryDocument()
        {
        }

        public static GetDevelNextPageQueryDocument Instance { get; } = new GetDevelNextPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "65be37cb69a1a00d06f5e2360a0a2d88");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelNextPage GraphQL operation
    /// <code>
    /// query GetDevelNextPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(first: $countItem, after: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageQuery : global::Prelast.GraphQL.IGetDevelNextPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelNextPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDevelNextPageQuery(global::StrawberryShake.IOperationExecutor<IGetDevelNextPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelNextPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursot);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursot);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursot)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursot", FormatCursot(cursot));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelNextPageQueryDocument.Instance.Hash.Value, name: "GetDevelNextPage", document: GetDevelNextPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursot(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelNextPage GraphQL operation
    /// <code>
    /// query GetDevelNextPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(first: $countItem, after: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelNextPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevelPrevPage GraphQL operation
    /// <code>
    /// query GetDevelPrevPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(last: $countItem, before: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelPrevPageQueryDocument()
        {
        }

        public static GetDevelPrevPageQueryDocument Instance { get; } = new GetDevelPrevPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "61f4c69247ba8d52b041e020f57c5402");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelPrevPage GraphQL operation
    /// <code>
    /// query GetDevelPrevPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(last: $countItem, before: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageQuery : global::Prelast.GraphQL.IGetDevelPrevPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelPrevPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDevelPrevPageQuery(global::StrawberryShake.IOperationExecutor<IGetDevelPrevPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelPrevPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelPrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursot);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelPrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursot);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursot)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursot", FormatCursot(cursot));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelPrevPageQueryDocument.Instance.Hash.Value, name: "GetDevelPrevPage", document: GetDevelPrevPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursot(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelPrevPage GraphQL operation
    /// <code>
    /// query GetDevelPrevPage($countItem: Int!, $cursot: String!) {
    ///   allDeveloper(last: $countItem, before: $cursot, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelPrevPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelPrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelPrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelWithFiltrQueryDocument()
        {
        }

        public static GetDevelWithFiltrQueryDocument Instance { get; } = new GetDevelWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7fa482d7c1add98ab766917b79899395");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrQuery : global::Prelast.GraphQL.IGetDevelWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDevelWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetDevelWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> ExecuteAsync(global::System.String country, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(country);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> Watch(global::System.String country, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(country);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String country)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("country", FormatCountry(country));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelWithFiltrQueryDocument.Instance.Hash.Value, name: "GetDevelWithFiltr", document: GetDevelWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountry(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> ExecuteAsync(global::System.String country, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> Watch(global::System.String country, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithPaging GraphQL operation
    /// <code>
    /// query GetDevelWithPaging($countItem: Int!) {
    ///   allDeveloper(first: $countItem, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelWithPagingQueryDocument()
        {
        }

        public static GetDevelWithPagingQueryDocument Instance { get; } = new GetDevelWithPagingQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "71d063923e5726e0039441681392ef13");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithPaging GraphQL operation
    /// <code>
    /// query GetDevelWithPaging($countItem: Int!) {
    ///   allDeveloper(first: $countItem, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingQuery : global::Prelast.GraphQL.IGetDevelWithPagingQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelWithPagingResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetDevelWithPagingQuery(global::StrawberryShake.IOperationExecutor<IGetDevelWithPagingResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelWithPagingResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithPagingResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithPagingResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelWithPagingQueryDocument.Instance.Hash.Value, name: "GetDevelWithPaging", document: GetDevelWithPagingQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithPaging GraphQL operation
    /// <code>
    /// query GetDevelWithPaging($countItem: Int!) {
    ///   allDeveloper(first: $countItem, order: { country: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithPagingQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithPagingResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithPagingResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames($countItem: Int!) {
    ///   allGameWithDevGerne(first: $countItem, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesQueryDocument()
        {
        }

        public static GetGamesQueryDocument Instance { get; } = new GetGamesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "31d9dacb84bbdd65fc684d2cca91198a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames($countItem: Int!) {
    ///   allGameWithDevGerne(first: $countItem, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQuery : global::Prelast.GraphQL.IGetGamesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetGamesQuery(global::StrawberryShake.IOperationExecutor<IGetGamesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesQueryDocument.Instance.Hash.Value, name: "GetGames", document: GetGamesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames($countItem: Int!) {
    ///   allGameWithDevGerne(first: $countItem, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGamesNextPage GraphQL operation
    /// <code>
    /// query GetGamesNextPage($countItem: Int!, $cursot: String!) {
    ///   allGameWithDevGerne(first: $countItem, after: $cursot, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesNextPageQueryDocument()
        {
        }

        public static GetGamesNextPageQueryDocument Instance { get; } = new GetGamesNextPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6c13ee253a92d32896750cf3a774bd97");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesNextPage GraphQL operation
    /// <code>
    /// query GetGamesNextPage($countItem: Int!, $cursot: String!) {
    ///   allGameWithDevGerne(first: $countItem, after: $cursot, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageQuery : global::Prelast.GraphQL.IGetGamesNextPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesNextPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGamesNextPageQuery(global::StrawberryShake.IOperationExecutor<IGetGamesNextPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesNextPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursot);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursot);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursot)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursot", FormatCursot(cursot));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesNextPageQueryDocument.Instance.Hash.Value, name: "GetGamesNextPage", document: GetGamesNextPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursot(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesNextPage GraphQL operation
    /// <code>
    /// query GetGamesNextPage($countItem: Int!, $cursot: String!) {
    ///   allGameWithDevGerne(first: $countItem, after: $cursot, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesNextPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursot, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursot, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGamesPrevPage GraphQL operation
    /// <code>
    /// query GetGamesPrevPage($countItem: Int!, $cursor: String!) {
    ///   allGameWithDevGerne(last: $countItem, before: $cursor, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesPrevPageQueryDocument()
        {
        }

        public static GetGamesPrevPageQueryDocument Instance { get; } = new GetGamesPrevPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5053d1c2562a5990e4003e71a4319dd9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesPrevPage GraphQL operation
    /// <code>
    /// query GetGamesPrevPage($countItem: Int!, $cursor: String!) {
    ///   allGameWithDevGerne(last: $countItem, before: $cursor, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageQuery : global::Prelast.GraphQL.IGetGamesPrevPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesPrevPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGamesPrevPageQuery(global::StrawberryShake.IOperationExecutor<IGetGamesPrevPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesPrevPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesPrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesPrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursor", FormatCursor(cursor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesPrevPageQueryDocument.Instance.Hash.Value, name: "GetGamesPrevPage", document: GetGamesPrevPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesPrevPage GraphQL operation
    /// <code>
    /// query GetGamesPrevPage($countItem: Int!, $cursor: String!) {
    ///   allGameWithDevGerne(last: $countItem, before: $cursor, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesPrevPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesPrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesPrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesWithFiltrQueryDocument()
        {
        }

        public static GetGamesWithFiltrQueryDocument Instance { get; } = new GetGamesWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6aba118c4864b170277387b1f5c27f31");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrQuery : global::Prelast.GraphQL.IGetGamesWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGamesWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetGamesWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> ExecuteAsync(global::System.String? search, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(search);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> Watch(global::System.String? search, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(search);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? search)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("search", FormatSearch(search));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesWithFiltrQueryDocument.Instance.Hash.Value, name: "GetGamesWithFiltr", document: GetGamesWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSearch(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> ExecuteAsync(global::System.String? search, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> Watch(global::System.String? search, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre(order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreQueryDocument()
        {
        }

        public static GetGenreQueryDocument Instance { get; } = new GetGenreQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d098404567ea0532d21cbfaf908aaf10");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre(order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreQuery : global::Prelast.GraphQL.IGetGenreQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreResult> _operationExecutor;
        public GetGenreQuery(global::StrawberryShake.IOperationExecutor<IGetGenreResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreQueryDocument.Instance.Hash.Value, name: "GetGenre", document: GetGenreQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre(order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenreNextPage GraphQL operation
    /// <code>
    /// query GetGenreNextPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(first: $countItem, after: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreNextPageQueryDocument()
        {
        }

        public static GetGenreNextPageQueryDocument Instance { get; } = new GetGenreNextPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5114ee202af638230a8ce30c0d339192");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreNextPage GraphQL operation
    /// <code>
    /// query GetGenreNextPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(first: $countItem, after: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageQuery : global::Prelast.GraphQL.IGetGenreNextPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreNextPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGenreNextPageQuery(global::StrawberryShake.IOperationExecutor<IGetGenreNextPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreNextPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursor", FormatCursor(cursor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreNextPageQueryDocument.Instance.Hash.Value, name: "GetGenreNextPage", document: GetGenreNextPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreNextPage GraphQL operation
    /// <code>
    /// query GetGenreNextPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(first: $countItem, after: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreNextPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreNextPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreNextPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenrePrevPage GraphQL operation
    /// <code>
    /// query GetGenrePrevPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(last: $countItem, before: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenrePrevPageQueryDocument()
        {
        }

        public static GetGenrePrevPageQueryDocument Instance { get; } = new GetGenrePrevPageQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "db65a798927aaa2b368d674f46520d24");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenrePrevPage GraphQL operation
    /// <code>
    /// query GetGenrePrevPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(last: $countItem, before: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageQuery : global::Prelast.GraphQL.IGetGenrePrevPageQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenrePrevPageResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGenrePrevPageQuery(global::StrawberryShake.IOperationExecutor<IGetGenrePrevPageResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenrePrevPageResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenrePrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem, cursor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenrePrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem, cursor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem, global::System.String cursor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            variables.Add("cursor", FormatCursor(cursor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenrePrevPageQueryDocument.Instance.Hash.Value, name: "GetGenrePrevPage", document: GetGenrePrevPageQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatCursor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenrePrevPage GraphQL operation
    /// <code>
    /// query GetGenrePrevPage($countItem: Int!, $cursor: String!) {
    ///   allGenre(last: $countItem, before: $cursor, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenrePrevPageQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenrePrevPageResult>> ExecuteAsync(global::System.Int32 countItem, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenrePrevPageResult>> Watch(global::System.Int32 countItem, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreWithFiltrQueryDocument()
        {
        }

        public static GetGenreWithFiltrQueryDocument Instance { get; } = new GetGenreWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e705140b5e51e3f8133ca09239fe7116");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrQuery : global::Prelast.GraphQL.IGetGenreWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGenreWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetGenreWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> ExecuteAsync(global::System.String filtr, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filtr);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> Watch(global::System.String filtr, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filtr);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String filtr)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filtr", FormatFiltr(filtr));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreWithFiltrQueryDocument.Instance.Hash.Value, name: "GetGenreWithFiltr", document: GetGenreWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFiltr(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> ExecuteAsync(global::System.String filtr, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> Watch(global::System.String filtr, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithPaging GraphQL operation
    /// <code>
    /// query GetGenreWithPaging($countItem: Int!) {
    ///   allGenre(first: $countItem, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreWithPagingQueryDocument()
        {
        }

        public static GetGenreWithPagingQueryDocument Instance { get; } = new GetGenreWithPagingQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "deab045ce3f1a20328b450f53822b78d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithPaging GraphQL operation
    /// <code>
    /// query GetGenreWithPaging($countItem: Int!) {
    ///   allGenre(first: $countItem, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingQuery : global::Prelast.GraphQL.IGetGenreWithPagingQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreWithPagingResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetGenreWithPagingQuery(global::StrawberryShake.IOperationExecutor<IGetGenreWithPagingResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreWithPagingResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithPagingResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(countItem);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithPagingResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(countItem);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 countItem)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("countItem", FormatCountItem(countItem));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreWithPagingQueryDocument.Instance.Hash.Value, name: "GetGenreWithPaging", document: GetGenreWithPagingQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountItem(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithPaging GraphQL operation
    /// <code>
    /// query GetGenreWithPaging($countItem: Int!) {
    ///   allGenre(first: $countItem, order: { name: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       hasNextPage
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithPagingQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithPagingResult>> ExecuteAsync(global::System.Int32 countItem, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithPagingResult>> Watch(global::System.Int32 countItem, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClient : global::Prelast.GraphQL.IConferenceClient
    {
        private readonly global::Prelast.GraphQL.IChangeNameDevMutation _changeNameDev;
        private readonly global::Prelast.GraphQL.ICreateDevMutation _createDev;
        private readonly global::Prelast.GraphQL.IDelDevelMutation _delDevel;
        private readonly global::Prelast.GraphQL.IChangePriceMutation _changePrice;
        private readonly global::Prelast.GraphQL.ICreateGameMutation _createGame;
        private readonly global::Prelast.GraphQL.IDelGameMutation _delGame;
        private readonly global::Prelast.GraphQL.IChangeNameGenreMutation _changeNameGenre;
        private readonly global::Prelast.GraphQL.ICreateGenreMutation _createGenre;
        private readonly global::Prelast.GraphQL.IDelGenreMutation _delGenre;
        private readonly global::Prelast.GraphQL.IGetDevelQuery _getDevel;
        private readonly global::Prelast.GraphQL.IGetDevelNextPageQuery _getDevelNextPage;
        private readonly global::Prelast.GraphQL.IGetDevelPrevPageQuery _getDevelPrevPage;
        private readonly global::Prelast.GraphQL.IGetDevelWithFiltrQuery _getDevelWithFiltr;
        private readonly global::Prelast.GraphQL.IGetDevelWithPagingQuery _getDevelWithPaging;
        private readonly global::Prelast.GraphQL.IGetGamesQuery _getGames;
        private readonly global::Prelast.GraphQL.IGetGamesNextPageQuery _getGamesNextPage;
        private readonly global::Prelast.GraphQL.IGetGamesPrevPageQuery _getGamesPrevPage;
        private readonly global::Prelast.GraphQL.IGetGamesWithFiltrQuery _getGamesWithFiltr;
        private readonly global::Prelast.GraphQL.IGetGenreQuery _getGenre;
        private readonly global::Prelast.GraphQL.IGetGenreNextPageQuery _getGenreNextPage;
        private readonly global::Prelast.GraphQL.IGetGenrePrevPageQuery _getGenrePrevPage;
        private readonly global::Prelast.GraphQL.IGetGenreWithFiltrQuery _getGenreWithFiltr;
        private readonly global::Prelast.GraphQL.IGetGenreWithPagingQuery _getGenreWithPaging;
        public ConferenceClient(global::Prelast.GraphQL.IChangeNameDevMutation changeNameDev, global::Prelast.GraphQL.ICreateDevMutation createDev, global::Prelast.GraphQL.IDelDevelMutation delDevel, global::Prelast.GraphQL.IChangePriceMutation changePrice, global::Prelast.GraphQL.ICreateGameMutation createGame, global::Prelast.GraphQL.IDelGameMutation delGame, global::Prelast.GraphQL.IChangeNameGenreMutation changeNameGenre, global::Prelast.GraphQL.ICreateGenreMutation createGenre, global::Prelast.GraphQL.IDelGenreMutation delGenre, global::Prelast.GraphQL.IGetDevelQuery getDevel, global::Prelast.GraphQL.IGetDevelNextPageQuery getDevelNextPage, global::Prelast.GraphQL.IGetDevelPrevPageQuery getDevelPrevPage, global::Prelast.GraphQL.IGetDevelWithFiltrQuery getDevelWithFiltr, global::Prelast.GraphQL.IGetDevelWithPagingQuery getDevelWithPaging, global::Prelast.GraphQL.IGetGamesQuery getGames, global::Prelast.GraphQL.IGetGamesNextPageQuery getGamesNextPage, global::Prelast.GraphQL.IGetGamesPrevPageQuery getGamesPrevPage, global::Prelast.GraphQL.IGetGamesWithFiltrQuery getGamesWithFiltr, global::Prelast.GraphQL.IGetGenreQuery getGenre, global::Prelast.GraphQL.IGetGenreNextPageQuery getGenreNextPage, global::Prelast.GraphQL.IGetGenrePrevPageQuery getGenrePrevPage, global::Prelast.GraphQL.IGetGenreWithFiltrQuery getGenreWithFiltr, global::Prelast.GraphQL.IGetGenreWithPagingQuery getGenreWithPaging)
        {
            _changeNameDev = changeNameDev ?? throw new global::System.ArgumentNullException(nameof(changeNameDev));
            _createDev = createDev ?? throw new global::System.ArgumentNullException(nameof(createDev));
            _delDevel = delDevel ?? throw new global::System.ArgumentNullException(nameof(delDevel));
            _changePrice = changePrice ?? throw new global::System.ArgumentNullException(nameof(changePrice));
            _createGame = createGame ?? throw new global::System.ArgumentNullException(nameof(createGame));
            _delGame = delGame ?? throw new global::System.ArgumentNullException(nameof(delGame));
            _changeNameGenre = changeNameGenre ?? throw new global::System.ArgumentNullException(nameof(changeNameGenre));
            _createGenre = createGenre ?? throw new global::System.ArgumentNullException(nameof(createGenre));
            _delGenre = delGenre ?? throw new global::System.ArgumentNullException(nameof(delGenre));
            _getDevel = getDevel ?? throw new global::System.ArgumentNullException(nameof(getDevel));
            _getDevelNextPage = getDevelNextPage ?? throw new global::System.ArgumentNullException(nameof(getDevelNextPage));
            _getDevelPrevPage = getDevelPrevPage ?? throw new global::System.ArgumentNullException(nameof(getDevelPrevPage));
            _getDevelWithFiltr = getDevelWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getDevelWithFiltr));
            _getDevelWithPaging = getDevelWithPaging ?? throw new global::System.ArgumentNullException(nameof(getDevelWithPaging));
            _getGames = getGames ?? throw new global::System.ArgumentNullException(nameof(getGames));
            _getGamesNextPage = getGamesNextPage ?? throw new global::System.ArgumentNullException(nameof(getGamesNextPage));
            _getGamesPrevPage = getGamesPrevPage ?? throw new global::System.ArgumentNullException(nameof(getGamesPrevPage));
            _getGamesWithFiltr = getGamesWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getGamesWithFiltr));
            _getGenre = getGenre ?? throw new global::System.ArgumentNullException(nameof(getGenre));
            _getGenreNextPage = getGenreNextPage ?? throw new global::System.ArgumentNullException(nameof(getGenreNextPage));
            _getGenrePrevPage = getGenrePrevPage ?? throw new global::System.ArgumentNullException(nameof(getGenrePrevPage));
            _getGenreWithFiltr = getGenreWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getGenreWithFiltr));
            _getGenreWithPaging = getGenreWithPaging ?? throw new global::System.ArgumentNullException(nameof(getGenreWithPaging));
        }

        public static global::System.String ClientName => "ConferenceClient";
        public global::Prelast.GraphQL.IChangeNameDevMutation ChangeNameDev => _changeNameDev;
        public global::Prelast.GraphQL.ICreateDevMutation CreateDev => _createDev;
        public global::Prelast.GraphQL.IDelDevelMutation DelDevel => _delDevel;
        public global::Prelast.GraphQL.IChangePriceMutation ChangePrice => _changePrice;
        public global::Prelast.GraphQL.ICreateGameMutation CreateGame => _createGame;
        public global::Prelast.GraphQL.IDelGameMutation DelGame => _delGame;
        public global::Prelast.GraphQL.IChangeNameGenreMutation ChangeNameGenre => _changeNameGenre;
        public global::Prelast.GraphQL.ICreateGenreMutation CreateGenre => _createGenre;
        public global::Prelast.GraphQL.IDelGenreMutation DelGenre => _delGenre;
        public global::Prelast.GraphQL.IGetDevelQuery GetDevel => _getDevel;
        public global::Prelast.GraphQL.IGetDevelNextPageQuery GetDevelNextPage => _getDevelNextPage;
        public global::Prelast.GraphQL.IGetDevelPrevPageQuery GetDevelPrevPage => _getDevelPrevPage;
        public global::Prelast.GraphQL.IGetDevelWithFiltrQuery GetDevelWithFiltr => _getDevelWithFiltr;
        public global::Prelast.GraphQL.IGetDevelWithPagingQuery GetDevelWithPaging => _getDevelWithPaging;
        public global::Prelast.GraphQL.IGetGamesQuery GetGames => _getGames;
        public global::Prelast.GraphQL.IGetGamesNextPageQuery GetGamesNextPage => _getGamesNextPage;
        public global::Prelast.GraphQL.IGetGamesPrevPageQuery GetGamesPrevPage => _getGamesPrevPage;
        public global::Prelast.GraphQL.IGetGamesWithFiltrQuery GetGamesWithFiltr => _getGamesWithFiltr;
        public global::Prelast.GraphQL.IGetGenreQuery GetGenre => _getGenre;
        public global::Prelast.GraphQL.IGetGenreNextPageQuery GetGenreNextPage => _getGenreNextPage;
        public global::Prelast.GraphQL.IGetGenrePrevPageQuery GetGenrePrevPage => _getGenrePrevPage;
        public global::Prelast.GraphQL.IGetGenreWithFiltrQuery GetGenreWithFiltr => _getGenreWithFiltr;
        public global::Prelast.GraphQL.IGetGenreWithPagingQuery GetGenreWithPaging => _getGenreWithPaging;
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IConferenceClient
    {
        global::Prelast.GraphQL.IChangeNameDevMutation ChangeNameDev { get; }

        global::Prelast.GraphQL.ICreateDevMutation CreateDev { get; }

        global::Prelast.GraphQL.IDelDevelMutation DelDevel { get; }

        global::Prelast.GraphQL.IChangePriceMutation ChangePrice { get; }

        global::Prelast.GraphQL.ICreateGameMutation CreateGame { get; }

        global::Prelast.GraphQL.IDelGameMutation DelGame { get; }

        global::Prelast.GraphQL.IChangeNameGenreMutation ChangeNameGenre { get; }

        global::Prelast.GraphQL.ICreateGenreMutation CreateGenre { get; }

        global::Prelast.GraphQL.IDelGenreMutation DelGenre { get; }

        global::Prelast.GraphQL.IGetDevelQuery GetDevel { get; }

        global::Prelast.GraphQL.IGetDevelNextPageQuery GetDevelNextPage { get; }

        global::Prelast.GraphQL.IGetDevelPrevPageQuery GetDevelPrevPage { get; }

        global::Prelast.GraphQL.IGetDevelWithFiltrQuery GetDevelWithFiltr { get; }

        global::Prelast.GraphQL.IGetDevelWithPagingQuery GetDevelWithPaging { get; }

        global::Prelast.GraphQL.IGetGamesQuery GetGames { get; }

        global::Prelast.GraphQL.IGetGamesNextPageQuery GetGamesNextPage { get; }

        global::Prelast.GraphQL.IGetGamesPrevPageQuery GetGamesPrevPage { get; }

        global::Prelast.GraphQL.IGetGamesWithFiltrQuery GetGamesWithFiltr { get; }

        global::Prelast.GraphQL.IGetGenreQuery GetGenre { get; }

        global::Prelast.GraphQL.IGetGenreNextPageQuery GetGenreNextPage { get; }

        global::Prelast.GraphQL.IGetGenrePrevPageQuery GetGenrePrevPage { get; }

        global::Prelast.GraphQL.IGetGenreWithFiltrQuery GetGenreWithFiltr { get; }

        global::Prelast.GraphQL.IGetGenreWithPagingQuery GetGenreWithPaging { get; }
    }
}

namespace Prelast.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangeNameDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangeNameDevResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangeNameDevResult);
        public ChangeNameDevResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangeNameDevResultInfo info)
            {
                return new ChangeNameDevResult(MapIChangeNameDev_ChangeDevNameByIdArray(info.ChangeDevNameById, snapshot));
            }

            throw new global::System.ArgumentException("ChangeNameDevResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById?>? MapIChangeNameDev_ChangeDevNameByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIChangeNameDev_ChangeDevNameById(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById? MapIChangeNameDev_ChangeDevNameById(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangeNameDev_ChangeDevNameById returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangeNameDev_ChangeDevNameById_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangeNameDevResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? changeDevNameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeDevNameById = changeDevNameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? ChangeDevNameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangeNameDevResultInfo(ChangeDevNameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateDevResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateDevResult);
        public CreateDevResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateDevResultInfo info)
            {
                return new CreateDevResult(MapICreateDev_CreateDeveloperArray(info.CreateDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("CreateDevResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateDev_CreateDeveloper?>? MapICreateDev_CreateDeveloperArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.ICreateDev_CreateDeveloper?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapICreateDev_CreateDeveloper(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.ICreateDev_CreateDeveloper? MapICreateDev_CreateDeveloper(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateDev_CreateDeveloper returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateDev_CreateDeveloper_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateDevResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? createDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateDeveloper = createDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? CreateDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateDevResultInfo(CreateDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelDevelResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelDevelResult);
        public DelDevelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelDevelResultInfo info)
            {
                return new DelDevelResult(MapIDelDevel_DeleteDevByIdArray(info.DeleteDevById, snapshot));
            }

            throw new global::System.ArgumentException("DelDevelResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelDevel_DeleteDevById?>? MapIDelDevel_DeleteDevByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IDelDevel_DeleteDevById?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIDelDevel_DeleteDevById(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IDelDevel_DeleteDevById? MapIDelDevel_DeleteDevById(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDelDevel_DeleteDevById returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DelDevel_DeleteDevById_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelDevelResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? deleteDevById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteDevById = deleteDevById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeleteDevById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelDevelResultInfo(DeleteDevById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangePriceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangePriceResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangePriceResult);
        public ChangePriceResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangePriceResultInfo info)
            {
                return new ChangePriceResult(MapIChangePrice_ChangeGamePriceByIdArray(info.ChangeGamePriceById, snapshot));
            }

            throw new global::System.ArgumentException("ChangePriceResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById?>? MapIChangePrice_ChangeGamePriceByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIChangePrice_ChangeGamePriceById(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById? MapIChangePrice_ChangeGamePriceById(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangePriceResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? changeGamePriceById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeGamePriceById = changeGamePriceById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? ChangeGamePriceById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangePriceResultInfo(ChangeGamePriceById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateGameResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateGameResult);
        public CreateGameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateGameResultInfo info)
            {
                return new CreateGameResult(MapICreateGame_CreateGameWithDeveloperGenreIdArray(info.CreateGameWithDeveloperGenreId, snapshot));
            }

            throw new global::System.ArgumentException("CreateGameResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId?>? MapICreateGame_CreateGameWithDeveloperGenreIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapICreateGame_CreateGameWithDeveloperGenreId(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId? MapICreateGame_CreateGameWithDeveloperGenreId(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateGame_CreateGameWithDeveloperGenreId returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateGame_CreateGameWithDeveloperGenreId_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateGameResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? createGameWithDeveloperGenreId, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateGameWithDeveloperGenreId = createGameWithDeveloperGenreId;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? CreateGameWithDeveloperGenreId { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateGameResultInfo(CreateGameWithDeveloperGenreId, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelGameResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelGameResult);
        public DelGameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelGameResultInfo info)
            {
                return new DelGameResult(MapIDelGame_DeleteGameByIdArray(info.DeleteGameById, snapshot));
            }

            throw new global::System.ArgumentException("DelGameResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGame_DeleteGameById?>? MapIDelGame_DeleteGameByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IDelGame_DeleteGameById?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIDelGame_DeleteGameById(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IDelGame_DeleteGameById? MapIDelGame_DeleteGameById(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDelGame_DeleteGameById returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DelGame_DeleteGameById_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelGameResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? deleteGameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteGameById = deleteGameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeleteGameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelGameResultInfo(DeleteGameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangeNameGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangeNameGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangeNameGenreResult);
        public ChangeNameGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangeNameGenreResultInfo info)
            {
                return new ChangeNameGenreResult(MapIChangeNameGenre_ChangeGenreNameByIdArray(info.ChangeGenreNameById, snapshot));
            }

            throw new global::System.ArgumentException("ChangeNameGenreResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById?>? MapIChangeNameGenre_ChangeGenreNameByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIChangeNameGenre_ChangeGenreNameById(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById? MapIChangeNameGenre_ChangeGenreNameById(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangeNameGenre_ChangeGenreNameById returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangeNameGenre_ChangeGenreNameById_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangeNameGenreResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? changeGenreNameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeGenreNameById = changeGenreNameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? ChangeGenreNameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangeNameGenreResultInfo(ChangeGenreNameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateGenreResult);
        public CreateGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateGenreResultInfo info)
            {
                return new CreateGenreResult(MapICreateGenre_CreateGenreArray(info.CreateGenre, snapshot));
            }

            throw new global::System.ArgumentException("CreateGenreResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.ICreateGenre_CreateGenre?>? MapICreateGenre_CreateGenreArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.ICreateGenre_CreateGenre?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapICreateGenre_CreateGenre(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.ICreateGenre_CreateGenre? MapICreateGenre_CreateGenre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateGenre_CreateGenre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateGenre_CreateGenre_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateGenreResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? createGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateGenre = createGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? CreateGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateGenreResultInfo(CreateGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelGenreResult);
        public DelGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelGenreResultInfo info)
            {
                return new DelGenreResult(MapIDelGenre_DeleteGenreByIdArray(info.DeleteGenreById, snapshot));
            }

            throw new global::System.ArgumentException("DelGenreResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IDelGenre_DeleteGenreById?>? MapIDelGenre_DeleteGenreByIdArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IDelGenre_DeleteGenreById?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIDelGenre_DeleteGenreById(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IDelGenre_DeleteGenreById? MapIDelGenre_DeleteGenreById(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDelGenre_DeleteGenreById returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DelGenre_DeleteGenreById_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelGenreResultInfo(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? deleteGenreById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteGenreById = deleteGenreById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeleteGenreById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelGenreResultInfo(DeleteGenreById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelResult);
        public GetDevelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelResultInfo info)
            {
                return new GetDevelResult(MapIGetDevel_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevel_AllDeveloper? MapIGetDevel_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevel_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevel_AllDeveloper_AllDeveloperConnection(MapIGetDevel_AllDeveloper_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? MapIGetDevel_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevel_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes? MapIGetDevel_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevel_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevel_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelNextPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelNextPageResult);
        public GetDevelNextPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelNextPageResultInfo info)
            {
                return new GetDevelNextPageResult(MapIGetDevelNextPage_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelNextPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper? MapIGetDevelNextPage_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelNextPage_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelNextPage_AllDeveloper_AllDeveloperConnection(MapIGetDevelNextPage_AllDeveloper_NodesArray(data.Nodes, snapshot), MapNonNullableIGetDevelNextPage_AllDeveloper_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes?>? MapIGetDevelNextPage_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevelNextPage_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_Nodes? MapIGetDevelNextPage_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelNextPage_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelNextPage_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetDevelNextPage_AllDeveloper_PageInfo MapNonNullableIGetDevelNextPage_AllDeveloper_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDevelNextPage_AllDeveloper_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDevelNextPage_AllDeveloper_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelNextPageResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelNextPageResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelPrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelPrevPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelPrevPageResult);
        public GetDevelPrevPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelPrevPageResultInfo info)
            {
                return new GetDevelPrevPageResult(MapIGetDevelPrevPage_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelPrevPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper? MapIGetDevelPrevPage_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelPrevPage_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelPrevPage_AllDeveloper_AllDeveloperConnection(MapIGetDevelPrevPage_AllDeveloper_NodesArray(data.Nodes, snapshot), MapNonNullableIGetDevelPrevPage_AllDeveloper_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes?>? MapIGetDevelPrevPage_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevelPrevPage_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_Nodes? MapIGetDevelPrevPage_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelPrevPage_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelPrevPage_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetDevelPrevPage_AllDeveloper_PageInfo MapNonNullableIGetDevelPrevPage_AllDeveloper_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDevelPrevPage_AllDeveloper_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDevelPrevPage_AllDeveloper_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelPrevPageResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelPrevPageResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelWithFiltrResult);
        public GetDevelWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelWithFiltrResultInfo info)
            {
                return new GetDevelWithFiltrResult(MapIGetDevelWithFiltr_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? MapIGetDevelWithFiltr_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithFiltr_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection(MapIGetDevelWithFiltr_AllDeveloper_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? MapIGetDevelWithFiltr_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevelWithFiltr_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes? MapIGetDevelWithFiltr_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithFiltr_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithFiltr_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelWithFiltrResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelWithFiltrResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelWithPagingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelWithPagingResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelWithPagingResult);
        public GetDevelWithPagingResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelWithPagingResultInfo info)
            {
                return new GetDevelWithPagingResult(MapIGetDevelWithPaging_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelWithPagingResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper? MapIGetDevelWithPaging_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithPaging_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithPaging_AllDeveloper_AllDeveloperConnection(MapIGetDevelWithPaging_AllDeveloper_NodesArray(data.Nodes, snapshot), MapNonNullableIGetDevelWithPaging_AllDeveloper_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes?>? MapIGetDevelWithPaging_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevelWithPaging_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_Nodes? MapIGetDevelWithPaging_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithPaging_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithPaging_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetDevelWithPaging_AllDeveloper_PageInfo MapNonNullableIGetDevelWithPaging_AllDeveloper_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDevelWithPaging_AllDeveloper_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDevelWithPaging_AllDeveloper_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelWithPagingResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelWithPagingResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesResult);
        public GetGamesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesResultInfo info)
            {
                return new GetGamesResult(MapIGetGames_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? MapIGetGames_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGames_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGames_AllGameWithDevGerne_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? MapIGetGames_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGames_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes? MapIGetGames_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_PageInfo MapNonNullableIGetGames_AllGameWithDevGerne_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGames_AllGameWithDevGerne_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGames_AllGameWithDevGerne_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesNextPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesNextPageResult);
        public GetGamesNextPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesNextPageResultInfo info)
            {
                return new GetGamesNextPageResult(MapIGetGamesNextPage_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesNextPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne? MapIGetGamesNextPage_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesNextPage_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesNextPage_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGamesNextPage_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGamesNextPage_AllGameWithDevGerne_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes?>? MapIGetGamesNextPage_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGamesNextPage_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_Nodes? MapIGetGamesNextPage_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesNextPage_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesNextPage_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGamesNextPage_AllGameWithDevGerne_PageInfo MapNonNullableIGetGamesNextPage_AllGameWithDevGerne_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGamesNextPage_AllGameWithDevGerne_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGamesNextPage_AllGameWithDevGerne_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesNextPageResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesNextPageResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesPrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesPrevPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesPrevPageResult);
        public GetGamesPrevPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesPrevPageResultInfo info)
            {
                return new GetGamesPrevPageResult(MapIGetGamesPrevPage_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesPrevPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne? MapIGetGamesPrevPage_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesPrevPage_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesPrevPage_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGamesPrevPage_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGamesPrevPage_AllGameWithDevGerne_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes?>? MapIGetGamesPrevPage_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGamesPrevPage_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_Nodes? MapIGetGamesPrevPage_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesPrevPage_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesPrevPage_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGamesPrevPage_AllGameWithDevGerne_PageInfo MapNonNullableIGetGamesPrevPage_AllGameWithDevGerne_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGamesPrevPage_AllGameWithDevGerne_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGamesPrevPage_AllGameWithDevGerne_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesPrevPageResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesPrevPageResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesWithFiltrResult);
        public GetGamesWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesWithFiltrResultInfo info)
            {
                return new GetGamesWithFiltrResult(MapIGetGamesWithFiltr_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? MapIGetGamesWithFiltr_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesWithFiltr_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? MapIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes? MapIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesWithFiltr_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesWithFiltrResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesWithFiltrResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreResult);
        public GetGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreResultInfo info)
            {
                return new GetGenreResult(MapIGetGenre_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenre_AllGenre? MapIGetGenre_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenre_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenre_AllGenre_AllGenreConnection(MapIGetGenre_AllGenre_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? MapIGetGenre_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenre_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes? MapIGetGenre_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenre_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenre_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreNextPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreNextPageResult);
        public GetGenreNextPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreNextPageResultInfo info)
            {
                return new GetGenreNextPageResult(MapIGetGenreNextPage_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreNextPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenreNextPage_AllGenre? MapIGetGenreNextPage_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreNextPage_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreNextPage_AllGenre_AllGenreConnection(MapIGetGenreNextPage_AllGenre_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGenreNextPage_AllGenre_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes?>? MapIGetGenreNextPage_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenreNextPage_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_Nodes? MapIGetGenreNextPage_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreNextPage_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreNextPage_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGenreNextPage_AllGenre_PageInfo MapNonNullableIGetGenreNextPage_AllGenre_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGenreNextPage_AllGenre_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGenreNextPage_AllGenre_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreNextPageResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreNextPageResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenrePrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenrePrevPageResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenrePrevPageResult);
        public GetGenrePrevPageResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenrePrevPageResultInfo info)
            {
                return new GetGenrePrevPageResult(MapIGetGenrePrevPage_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenrePrevPageResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre? MapIGetGenrePrevPage_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenrePrevPage_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenrePrevPage_AllGenre_AllGenreConnection(MapIGetGenrePrevPage_AllGenre_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGenrePrevPage_AllGenre_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes?>? MapIGetGenrePrevPage_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenrePrevPage_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_Nodes? MapIGetGenrePrevPage_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenrePrevPage_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenrePrevPage_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGenrePrevPage_AllGenre_PageInfo MapNonNullableIGetGenrePrevPage_AllGenre_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGenrePrevPage_AllGenre_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGenrePrevPage_AllGenre_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenrePrevPageResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenrePrevPageResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreWithFiltrResult);
        public GetGenreWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreWithFiltrResultInfo info)
            {
                return new GetGenreWithFiltrResult(MapIGetGenreWithFiltr_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? MapIGetGenreWithFiltr_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithFiltr_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithFiltr_AllGenre_AllGenreConnection(MapIGetGenreWithFiltr_AllGenre_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? MapIGetGenreWithFiltr_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenreWithFiltr_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes? MapIGetGenreWithFiltr_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithFiltr_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithFiltr_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreWithFiltrResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreWithFiltrResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreWithPagingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreWithPagingResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreWithPagingResult);
        public GetGenreWithPagingResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreWithPagingResultInfo info)
            {
                return new GetGenreWithPagingResult(MapIGetGenreWithPaging_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreWithPagingResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre? MapIGetGenreWithPaging_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithPaging_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithPaging_AllGenre_AllGenreConnection(MapIGetGenreWithPaging_AllGenre_NodesArray(data.Nodes, snapshot), MapNonNullableIGetGenreWithPaging_AllGenre_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes?>? MapIGetGenreWithPaging_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenreWithPaging_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_Nodes? MapIGetGenreWithPaging_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithPaging_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithPaging_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IGetGenreWithPaging_AllGenre_PageInfo MapNonNullableIGetGenreWithPaging_AllGenre_PageInfo(global::Prelast.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGenreWithPaging_AllGenre_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGenreWithPaging_AllGenre_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreWithPagingResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreWithPagingResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangeNameDevBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangeNameDevResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangeNameDevResult Result, ChangeNameDevResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangeNameDevResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangeNameDevResult, ChangeNameDevResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangeNameDevResultInfo(DeserializeIChangeNameDev_ChangeDevNameByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDevNameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIChangeNameDev_ChangeDevNameByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIChangeNameDev_ChangeDevNameById(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangeNameDev_ChangeDevNameById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateDevBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateDevResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateDevResult Result, CreateDevResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateDevResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateDevResult, CreateDevResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateDevResultInfo(DeserializeICreateDev_CreateDeveloperArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeICreateDev_CreateDeveloperArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeICreateDev_CreateDeveloper(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeICreateDev_CreateDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DelDevelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelDevelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelDevelResult Result, DelDevelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelDevelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelDevelResult, DelDevelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelDevelResultInfo(DeserializeIDelDevel_DeleteDevByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteDevById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIDelDevel_DeleteDevByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIDelDevel_DeleteDevById(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIDelDevel_DeleteDevById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangePriceBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangePriceResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangePriceResult Result, ChangePriceResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangePriceResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangePriceResult, ChangePriceResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangePriceResultInfo(DeserializeIChangePrice_ChangeGamePriceByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeGamePriceById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIChangePrice_ChangeGamePriceByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIChangePrice_ChangeGamePriceById(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIChangePrice_ChangeGamePriceById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateGameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateGameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateGameResult Result, CreateGameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateGameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateGameResult, CreateGameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateGameResultInfo(DeserializeICreateGame_CreateGameWithDeveloperGenreIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createGameWithDeveloperGenreId")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeICreateGame_CreateGameWithDeveloperGenreIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeICreateGame_CreateGameWithDeveloperGenreId(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeICreateGame_CreateGameWithDeveloperGenreId(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public DelGameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelGameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelGameResult Result, DelGameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelGameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelGameResult, DelGameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelGameResultInfo(DeserializeIDelGame_DeleteGameByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteGameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIDelGame_DeleteGameByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIDelGame_DeleteGameById(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIDelGame_DeleteGameById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangeNameGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangeNameGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangeNameGenreResult Result, ChangeNameGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangeNameGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangeNameGenreResult, ChangeNameGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangeNameGenreResultInfo(DeserializeIChangeNameGenre_ChangeGenreNameByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeGenreNameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIChangeNameGenre_ChangeGenreNameByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIChangeNameGenre_ChangeGenreNameById(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangeNameGenre_ChangeGenreNameById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateGenreResult Result, CreateGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateGenreResult, CreateGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateGenreResultInfo(DeserializeICreateGenre_CreateGenreArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeICreateGenre_CreateGenreArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeICreateGenre_CreateGenre(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeICreateGenre_CreateGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DelGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelGenreResult Result, DelGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelGenreResult, DelGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelGenreResultInfo(DeserializeIDelGenre_DeleteGenreByIdArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteGenreById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIDelGenre_DeleteGenreByIdArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIDelGenre_DeleteGenreById(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIDelGenre_DeleteGenreById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetDevelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelResult Result, GetDevelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelResult, GetDevelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelResultInfo(DeserializeIGetDevel_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevel_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevel_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevel_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevel_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevel_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelNextPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelNextPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetDevelNextPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelNextPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelNextPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelNextPageResult Result, GetDevelNextPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelNextPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelNextPageResult, GetDevelNextPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelNextPageResultInfo(DeserializeIGetDevelNextPage_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevelNextPage_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevelNextPage_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetDevelNextPage_AllDeveloper_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevelNextPage_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevelNextPage_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevelNextPage_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetDevelNextPage_AllDeveloper_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelPrevPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelPrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelPrevPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetDevelPrevPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelPrevPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelPrevPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelPrevPageResult Result, GetDevelPrevPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelPrevPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelPrevPageResult, GetDevelPrevPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelPrevPageResultInfo(DeserializeIGetDevelPrevPage_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevelPrevPage_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevelPrevPage_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetDevelPrevPage_AllDeveloper_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevelPrevPage_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevelPrevPage_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevelPrevPage_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetDevelPrevPage_AllDeveloper_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetDevelWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelWithFiltrResult Result, GetDevelWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelWithFiltrResult, GetDevelWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelWithFiltrResultInfo(DeserializeIGetDevelWithFiltr_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevelWithFiltr_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevelWithFiltr_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevelWithFiltr_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevelWithFiltr_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevelWithFiltr_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithPagingBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithPagingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithPagingResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetDevelWithPagingBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithPagingResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelWithPagingResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelWithPagingResult Result, GetDevelWithPagingResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelWithPagingResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelWithPagingResult, GetDevelWithPagingResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelWithPagingResultInfo(DeserializeIGetDevelWithPaging_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevelWithPaging_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevelWithPaging_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetDevelWithPaging_AllDeveloper_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevelWithPaging_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevelWithPaging_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevelWithPaging_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetDevelWithPaging_AllDeveloper_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGamesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesResult Result, GetGamesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesResult, GetGamesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesResultInfo(DeserializeIGetGames_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGames_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGames_AllGameWithDevGerne_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGames_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGames_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGames_AllGameWithDevGerne_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesNextPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesNextPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGamesNextPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesNextPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesNextPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesNextPageResult Result, GetGamesNextPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesNextPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesNextPageResult, GetGamesNextPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesNextPageResultInfo(DeserializeIGetGamesNextPage_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGamesNextPage_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGamesNextPage_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGamesNextPage_AllGameWithDevGerne_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGamesNextPage_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGamesNextPage_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGamesNextPage_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGamesNextPage_AllGameWithDevGerne_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesPrevPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesPrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesPrevPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGamesPrevPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesPrevPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesPrevPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesPrevPageResult Result, GetGamesPrevPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesPrevPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesPrevPageResult, GetGamesPrevPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesPrevPageResultInfo(DeserializeIGetGamesPrevPage_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGamesPrevPage_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGamesPrevPage_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGamesPrevPage_AllGameWithDevGerne_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGamesPrevPage_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGamesPrevPage_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGamesPrevPage_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGamesPrevPage_AllGameWithDevGerne_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetGamesWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesWithFiltrResult Result, GetGamesWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesWithFiltrResult, GetGamesWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesWithFiltrResultInfo(DeserializeIGetGamesWithFiltr_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreResult Result, GetGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreResult, GetGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreResultInfo(DeserializeIGetGenre_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenre_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenre_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenre_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenre_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenre_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreNextPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreNextPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreNextPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGenreNextPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreNextPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreNextPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreNextPageResult Result, GetGenreNextPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreNextPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreNextPageResult, GetGenreNextPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreNextPageResultInfo(DeserializeIGetGenreNextPage_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenreNextPage_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenreNextPage_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGenreNextPage_AllGenre_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenreNextPage_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenreNextPage_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenreNextPage_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGenreNextPage_AllGenre_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenrePrevPageBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenrePrevPageResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenrePrevPageResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGenrePrevPageBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenrePrevPageResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenrePrevPageResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenrePrevPageResult Result, GetGenrePrevPageResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenrePrevPageResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenrePrevPageResult, GetGenrePrevPageResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenrePrevPageResultInfo(DeserializeIGetGenrePrevPage_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenrePrevPage_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenrePrevPage_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGenrePrevPage_AllGenre_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenrePrevPage_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenrePrevPage_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenrePrevPage_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGenrePrevPage_AllGenre_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetGenreWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreWithFiltrResult Result, GetGenreWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreWithFiltrResult, GetGenreWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreWithFiltrResultInfo(DeserializeIGetGenreWithFiltr_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenreWithFiltr_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenreWithFiltr_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenreWithFiltr_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenreWithFiltr_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenreWithFiltr_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithPagingBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithPagingResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithPagingResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetGenreWithPagingBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithPagingResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreWithPagingResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreWithPagingResult Result, GetGenreWithPagingResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreWithPagingResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreWithPagingResult, GetGenreWithPagingResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreWithPagingResultInfo(DeserializeIGetGenreWithPaging_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenreWithPaging_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenreWithPaging_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeNonNullableIGetGenreWithPaging_AllGenre_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenreWithPaging_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenreWithPaging_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenreWithPaging_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Prelast.GraphQL.State.PageInfoData DeserializeNonNullableIGetGenreWithPaging_AllGenre_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DevelopersData
    {
        public DevelopersData(global::System.String __typename, global::System.Int32? developerId = default !, global::System.String? name = default !, global::System.String? country = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GamesData
    {
        public GamesData(global::System.String __typename, global::System.Int32? gamesId = default !, global::System.String? name = default !, global::System.Double? price = default !, global::Prelast.GraphQL.State.GenreData? genre = default !, global::Prelast.GraphQL.State.DevelopersData? developer = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double? Price { get; }

        public global::Prelast.GraphQL.State.GenreData? Genre { get; }

        public global::Prelast.GraphQL.State.DevelopersData? Developer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GenreData
    {
        public GenreData(global::System.String __typename, global::System.String? name = default !, global::System.Int32? genreId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            GenreId = genreId;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Int32? GenreId { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllDeveloperConnectionData
    {
        public AllDeveloperConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? nodes = default !, global::Prelast.GraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::Prelast.GraphQL.State.PageInfoData? PageInfo { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.Boolean? hasNextPage = default !, global::System.String? endCursor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            HasNextPage = hasNextPage;
            EndCursor = endCursor;
        }

        public global::System.String __typename { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllGameWithDevGerneConnectionData
    {
        public AllGameWithDevGerneConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? nodes = default !, global::Prelast.GraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::Prelast.GraphQL.State.PageInfoData? PageInfo { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllGenreConnectionData
    {
        public AllGenreConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? nodes = default !, global::Prelast.GraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::Prelast.GraphQL.State.PageInfoData? PageInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ConferenceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
