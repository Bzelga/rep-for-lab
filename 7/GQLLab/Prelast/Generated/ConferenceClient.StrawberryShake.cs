// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class ConferenceClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Prelast.GraphQL.State.ConferenceClientStoreAccessor> AddConferenceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Prelast.GraphQL.State.ConferenceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameDevMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangePriceMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateDevMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGameMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelDevelMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGameMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGenreMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Prelast.GraphQL.State.ConferenceClientStoreAccessor>("ConferenceClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ConferenceClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult>, global::Prelast.GraphQL.State.ChangeNameDevResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangeNameDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>, global::Prelast.GraphQL.State.ChangeNameDevBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangeNameDevResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangeNameDevMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangeNameDevMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult>, global::Prelast.GraphQL.State.ChangeNameGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangeNameGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>, global::Prelast.GraphQL.State.ChangeNameGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangeNameGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangeNameGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangeNameGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangeNameGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult>, global::Prelast.GraphQL.State.ChangePriceResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IChangePriceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>, global::Prelast.GraphQL.State.ChangePriceBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IChangePriceResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ChangePriceMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IChangePriceMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ChangePriceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult>, global::Prelast.GraphQL.State.CreateDevResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>, global::Prelast.GraphQL.State.CreateDevBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateDevResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateDevMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateDevMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateDevMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult>, global::Prelast.GraphQL.State.CreateGameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>, global::Prelast.GraphQL.State.CreateGameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateGameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateGameMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateGameMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult>, global::Prelast.GraphQL.State.CreateGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ICreateGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>, global::Prelast.GraphQL.State.CreateGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.ICreateGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.CreateGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ICreateGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.CreateGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult>, global::Prelast.GraphQL.State.DelDevelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelDevelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>, global::Prelast.GraphQL.State.DelDevelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelDevelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelDevelMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelDevelMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelDevelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult>, global::Prelast.GraphQL.State.DelGameResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>, global::Prelast.GraphQL.State.DelGameBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelGameResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelGameMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelGameMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGameMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult>, global::Prelast.GraphQL.State.DelGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IDelGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>, global::Prelast.GraphQL.State.DelGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IDelGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.DelGenreMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IDelGenreMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.DelGenreMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult>, global::Prelast.GraphQL.State.GetDevelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>, global::Prelast.GraphQL.State.GetDevelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult>, global::Prelast.GraphQL.State.GetDevelWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetDevelWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>, global::Prelast.GraphQL.State.GetDevelWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetDevelWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetDevelWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult>, global::Prelast.GraphQL.State.GetGamesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>, global::Prelast.GraphQL.State.GetGamesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult>, global::Prelast.GraphQL.State.GetGamesWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGamesWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>, global::Prelast.GraphQL.State.GetGamesWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGamesWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGamesWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult>, global::Prelast.GraphQL.State.GetGenreResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>, global::Prelast.GraphQL.State.GetGenreBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult>, global::Prelast.GraphQL.State.GetGenreWithFiltrResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.IGetGenreWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>, global::Prelast.GraphQL.State.GetGenreWithFiltrBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IGetGenreWithFiltrQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.GetGenreWithFiltrQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Prelast.GraphQL.State.ConferenceClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.ConferenceClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Prelast.GraphQL.IConferenceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Prelast.GraphQL.ConferenceClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Prelast.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResult : global::System.IEquatable<ChangeNameDevResult>, IChangeNameDevResult
    {
        public ChangeNameDevResult(global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById? changeDevNameById)
        {
            ChangeDevNameById = changeDevNameById;
        }

        public global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById? ChangeDevNameById { get; }

        public virtual global::System.Boolean Equals(ChangeNameDevResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ChangeDevNameById is null && other.ChangeDevNameById is null) || ChangeDevNameById != null && ChangeDevNameById.Equals(other.ChangeDevNameById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameDevResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeDevNameById != null)
                {
                    hash ^= 397 * ChangeDevNameById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDev_ChangeDevNameById_Developers : global::System.IEquatable<ChangeNameDev_ChangeDevNameById_Developers>, IChangeNameDev_ChangeDevNameById_Developers
    {
        public ChangeNameDev_ChangeDevNameById_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(ChangeNameDev_ChangeDevNameById_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameDev_ChangeDevNameById_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDevResult
    {
        public global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById? ChangeDevNameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDevelopersInfo
    {
        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDev_ChangeDevNameById : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDev_ChangeDevNameById_Developers : IChangeNameDev_ChangeDevNameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResult : global::System.IEquatable<ChangeNameGenreResult>, IChangeNameGenreResult
    {
        public ChangeNameGenreResult(global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById? changeGenreNameById)
        {
            ChangeGenreNameById = changeGenreNameById;
        }

        public global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById? ChangeGenreNameById { get; }

        public virtual global::System.Boolean Equals(ChangeNameGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ChangeGenreNameById is null && other.ChangeGenreNameById is null) || ChangeGenreNameById != null && ChangeGenreNameById.Equals(other.ChangeGenreNameById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeGenreNameById != null)
                {
                    hash ^= 397 * ChangeGenreNameById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenre_ChangeGenreNameById_Genre : global::System.IEquatable<ChangeNameGenre_ChangeGenreNameById_Genre>, IChangeNameGenre_ChangeGenreNameById_Genre
    {
        public ChangeNameGenre_ChangeGenreNameById_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ChangeNameGenre_ChangeGenreNameById_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangeNameGenre_ChangeGenreNameById_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenreResult
    {
        public global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById? ChangeGenreNameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGenreInfo
    {
        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenre_ChangeGenreNameById : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenre_ChangeGenreNameById_Genre : IChangeNameGenre_ChangeGenreNameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResult : global::System.IEquatable<ChangePriceResult>, IChangePriceResult
    {
        public ChangePriceResult(global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById? changeGamePriceById)
        {
            ChangeGamePriceById = changeGamePriceById;
        }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById? ChangeGamePriceById { get; }

        public virtual global::System.Boolean Equals(ChangePriceResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ChangeGamePriceById is null && other.ChangeGamePriceById is null) || ChangeGamePriceById != null && ChangeGamePriceById.Equals(other.ChangeGamePriceById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePriceResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ChangeGamePriceById != null)
                {
                    hash ^= 397 * ChangeGamePriceById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Games : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Games>, IChangePrice_ChangeGamePriceById_Games
    {
        public ChangePrice_ChangeGamePriceById_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Genre_Genre : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Genre_Genre>, IChangePrice_ChangeGamePriceById_Genre_Genre
    {
        public ChangePrice_ChangeGamePriceById_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePrice_ChangeGamePriceById_Developer_Developers : global::System.IEquatable<ChangePrice_ChangeGamePriceById_Developer_Developers>, IChangePrice_ChangeGamePriceById_Developer_Developers
    {
        public ChangePrice_ChangeGamePriceById_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(ChangePrice_ChangeGamePriceById_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ChangePrice_ChangeGamePriceById_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePriceResult
    {
        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById? ChangeGamePriceById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGamesInfo
    {
        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Games : IChangePrice_ChangeGamePriceById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Genre_Genre : IChangePrice_ChangeGamePriceById_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePrice_ChangeGamePriceById_Developer_Developers : IChangePrice_ChangeGamePriceById_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResult : global::System.IEquatable<CreateDevResult>, ICreateDevResult
    {
        public CreateDevResult(global::Prelast.GraphQL.ICreateDev_CreateDeveloper? createDeveloper)
        {
            CreateDeveloper = createDeveloper;
        }

        public global::Prelast.GraphQL.ICreateDev_CreateDeveloper? CreateDeveloper { get; }

        public virtual global::System.Boolean Equals(CreateDevResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateDeveloper is null && other.CreateDeveloper is null) || CreateDeveloper != null && CreateDeveloper.Equals(other.CreateDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDevResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateDeveloper != null)
                {
                    hash ^= 397 * CreateDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDev_CreateDeveloper_Developers : global::System.IEquatable<CreateDev_CreateDeveloper_Developers>, ICreateDev_CreateDeveloper_Developers
    {
        public CreateDev_CreateDeveloper_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(CreateDev_CreateDeveloper_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateDev_CreateDeveloper_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDevResult
    {
        public global::Prelast.GraphQL.ICreateDev_CreateDeveloper? CreateDeveloper { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDev_CreateDeveloper : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDev_CreateDeveloper_Developers : ICreateDev_CreateDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResult : global::System.IEquatable<CreateGameResult>, ICreateGameResult
    {
        public CreateGameResult(global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId? createGameWithDeveloperGenreId)
        {
            CreateGameWithDeveloperGenreId = createGameWithDeveloperGenreId;
        }

        public global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId? CreateGameWithDeveloperGenreId { get; }

        public virtual global::System.Boolean Equals(CreateGameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateGameWithDeveloperGenreId is null && other.CreateGameWithDeveloperGenreId is null) || CreateGameWithDeveloperGenreId != null && CreateGameWithDeveloperGenreId.Equals(other.CreateGameWithDeveloperGenreId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateGameWithDeveloperGenreId != null)
                {
                    hash ^= 397 * CreateGameWithDeveloperGenreId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Games : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Games>, ICreateGame_CreateGameWithDeveloperGenreId_Games
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre>, ICreateGame_CreateGameWithDeveloperGenreId_Genre_Genre
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers : global::System.IEquatable<CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers>, ICreateGame_CreateGameWithDeveloperGenreId_Developer_Developers
    {
        public CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGame_CreateGameWithDeveloperGenreId_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGameResult
    {
        public global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId? CreateGameWithDeveloperGenreId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Games : ICreateGame_CreateGameWithDeveloperGenreId
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Genre_Genre : ICreateGame_CreateGameWithDeveloperGenreId_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGame_CreateGameWithDeveloperGenreId_Developer_Developers : ICreateGame_CreateGameWithDeveloperGenreId_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResult : global::System.IEquatable<CreateGenreResult>, ICreateGenreResult
    {
        public CreateGenreResult(global::Prelast.GraphQL.ICreateGenre_CreateGenre? createGenre)
        {
            CreateGenre = createGenre;
        }

        public global::Prelast.GraphQL.ICreateGenre_CreateGenre? CreateGenre { get; }

        public virtual global::System.Boolean Equals(CreateGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateGenre is null && other.CreateGenre is null) || CreateGenre != null && CreateGenre.Equals(other.CreateGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateGenre != null)
                {
                    hash ^= 397 * CreateGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenre_CreateGenre_Genre : global::System.IEquatable<CreateGenre_CreateGenre_Genre>, ICreateGenre_CreateGenre_Genre
    {
        public CreateGenre_CreateGenre_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(CreateGenre_CreateGenre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateGenre_CreateGenre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenreResult
    {
        public global::Prelast.GraphQL.ICreateGenre_CreateGenre? CreateGenre { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenre_CreateGenre : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenre_CreateGenre_Genre : ICreateGenre_CreateGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResult : global::System.IEquatable<DelDevelResult>, IDelDevelResult
    {
        public DelDevelResult(global::System.String? deleteDevById)
        {
            DeleteDevById = deleteDevById;
        }

        public global::System.String? DeleteDevById { get; }

        public virtual global::System.Boolean Equals(DelDevelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeleteDevById is null && other.DeleteDevById is null) || DeleteDevById != null && DeleteDevById.Equals(other.DeleteDevById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelDevelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteDevById != null)
                {
                    hash ^= 397 * DeleteDevById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevelResult
    {
        public global::System.String? DeleteDevById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResult : global::System.IEquatable<DelGameResult>, IDelGameResult
    {
        public DelGameResult(global::System.String? deleteGameById)
        {
            DeleteGameById = deleteGameById;
        }

        public global::System.String? DeleteGameById { get; }

        public virtual global::System.Boolean Equals(DelGameResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeleteGameById is null && other.DeleteGameById is null) || DeleteGameById != null && DeleteGameById.Equals(other.DeleteGameById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGameResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteGameById != null)
                {
                    hash ^= 397 * DeleteGameById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGameResult
    {
        public global::System.String? DeleteGameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResult : global::System.IEquatable<DelGenreResult>, IDelGenreResult
    {
        public DelGenreResult(global::System.String? deleteGenreById)
        {
            DeleteGenreById = deleteGenreById;
        }

        public global::System.String? DeleteGenreById { get; }

        public virtual global::System.Boolean Equals(DelGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DeleteGenreById is null && other.DeleteGenreById is null) || DeleteGenreById != null && DeleteGenreById.Equals(other.DeleteGenreById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DelGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DeleteGenreById != null)
                {
                    hash ^= 397 * DeleteGenreById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenreResult
    {
        public global::System.String? DeleteGenreById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResult : global::System.IEquatable<GetDevelResult>, IGetDevelResult
    {
        public GetDevelResult(global::Prelast.GraphQL.IGetDevel_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevel_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevel_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevel_AllDeveloper_AllDeveloperConnection>, IGetDevel_AllDeveloper_AllDeveloperConnection
    {
        public GetDevel_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetDevel_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevel_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevel_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevel_AllDeveloper_Nodes_Developers>, IGetDevel_AllDeveloper_Nodes_Developers
    {
        public GetDevel_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevel_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevel_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelResult
    {
        public global::Prelast.GraphQL.IGetDevel_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_AllDeveloperConnection : IGetDevel_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevel_AllDeveloper_Nodes_Developers : IGetDevel_AllDeveloper_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResult : global::System.IEquatable<GetDevelWithFiltrResult>, IGetDevelWithFiltrResult
    {
        public GetDevelWithFiltrResult(global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? allDeveloper)
        {
            AllDeveloper = allDeveloper;
        }

        public global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? AllDeveloper { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllDeveloper is null && other.AllDeveloper is null) || AllDeveloper != null && AllDeveloper.Equals(other.AllDeveloper)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllDeveloper != null)
                {
                    hash ^= 397 * AllDeveloper.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection : global::System.IEquatable<GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection>, IGetDevelWithFiltr_AllDeveloper_AllDeveloperConnection
    {
        public GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltr_AllDeveloper_Nodes_Developers : global::System.IEquatable<GetDevelWithFiltr_AllDeveloper_Nodes_Developers>, IGetDevelWithFiltr_AllDeveloper_Nodes_Developers
    {
        public GetDevelWithFiltr_AllDeveloper_Nodes_Developers(global::System.Int32 developerId, global::System.String? name, global::System.String? country)
        {
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.Int32 DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetDevelWithFiltr_AllDeveloper_Nodes_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeveloperId == other.DeveloperId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDevelWithFiltr_AllDeveloper_Nodes_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeveloperId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? AllDeveloper { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_AllDeveloperConnection : IGetDevelWithFiltr_AllDeveloper
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_Nodes : IDevelopersInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltr_AllDeveloper_Nodes_Developers : IGetDevelWithFiltr_AllDeveloper_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResult : global::System.IEquatable<GetGamesResult>, IGetGamesResult
    {
        public GetGamesResult(global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Games>, IGetGames_AllGameWithDevGerne_Nodes_Games
    {
        public GetGames_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGames_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGames_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesResult
    {
        public global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGames_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Games : IGetGames_AllGameWithDevGerne_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResult : global::System.IEquatable<GetGamesWithFiltrResult>, IGetGamesWithFiltrResult
    {
        public GetGamesWithFiltrResult(global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? genre, global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? Genre { get; }

        public global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGamesWithFiltr_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGamesWithFiltr_AllGameWithDevGerne_Nodes_Developer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResult : global::System.IEquatable<GetGenreResult>, IGetGenreResult
    {
        public GetGenreResult(global::Prelast.GraphQL.IGetGenre_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenre_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenre_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenre_AllGenre_AllGenreConnection>, IGetGenre_AllGenre_AllGenreConnection
    {
        public GetGenre_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGenre_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenre_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenre_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenre_AllGenre_Nodes_Genre>, IGetGenre_AllGenre_Nodes_Genre
    {
        public GetGenre_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenre_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenre_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreResult
    {
        public global::Prelast.GraphQL.IGetGenre_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_AllGenreConnection : IGetGenre_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenre_AllGenre_Nodes_Genre : IGetGenre_AllGenre_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResult : global::System.IEquatable<GetGenreWithFiltrResult>, IGetGenreWithFiltrResult
    {
        public GetGenreWithFiltrResult(global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? allGenre)
        {
            AllGenre = allGenre;
        }

        public global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? AllGenre { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltrResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGenre is null && other.AllGenre is null) || AllGenre != null && AllGenre.Equals(other.AllGenre)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltrResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGenre != null)
                {
                    hash ^= 397 * AllGenre.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltr_AllGenre_AllGenreConnection : global::System.IEquatable<GetGenreWithFiltr_AllGenre_AllGenreConnection>, IGetGenreWithFiltr_AllGenre_AllGenreConnection
    {
        public GetGenreWithFiltr_AllGenre_AllGenreConnection(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltr_AllGenre_AllGenreConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltr_AllGenre_AllGenreConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltr_AllGenre_Nodes_Genre : global::System.IEquatable<GetGenreWithFiltr_AllGenre_Nodes_Genre>, IGetGenreWithFiltr_AllGenre_Nodes_Genre
    {
        public GetGenreWithFiltr_AllGenre_Nodes_Genre(global::System.Int32 genreId, global::System.String? name)
        {
            GenreId = genreId;
            Name = name;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGenreWithFiltr_AllGenre_Nodes_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGenreWithFiltr_AllGenre_Nodes_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltrResult
    {
        public global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? AllGenre { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_AllGenreConnection : IGetGenreWithFiltr_AllGenre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_Nodes : IGenreInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltr_AllGenre_Nodes_Genre : IGetGenreWithFiltr_AllGenre_Nodes
    {
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangeNameDevMutationDocument()
        {
        }

        public static ChangeNameDevMutationDocument Instance { get; } = new ChangeNameDevMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c15f05fa37ca0e39489268213d41c9b6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevMutation : global::Prelast.GraphQL.IChangeNameDevMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangeNameDevResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ChangeNameDevMutation(global::StrawberryShake.IOperationExecutor<IChangeNameDevResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangeNameDevResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id, global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangeNameDevMutationDocument.Instance.Hash.Value, name: "ChangeNameDev", document: ChangeNameDevMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameDev GraphQL operation
    /// <code>
    /// mutation ChangeNameDev($id: Int!, $name: String!) {
    ///   changeDevNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameDevMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameDevResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangeNameGenreMutationDocument()
        {
        }

        public static ChangeNameGenreMutationDocument Instance { get; } = new ChangeNameGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8992e07cd09e54f6ce57771bcd8f3f97");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreMutation : global::Prelast.GraphQL.IChangeNameGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangeNameGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ChangeNameGenreMutation(global::StrawberryShake.IOperationExecutor<IChangeNameGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangeNameGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id, global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangeNameGenreMutationDocument.Instance.Hash.Value, name: "ChangeNameGenre", document: ChangeNameGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangeNameGenre GraphQL operation
    /// <code>
    /// mutation ChangeNameGenre($id: Int!, $name: String!) {
    ///   changeGenreNameById(id: $id, newName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangeNameGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangeNameGenreResult>> Watch(global::System.Int32 id, global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceMutationDocument : global::StrawberryShake.IDocument
    {
        private ChangePriceMutationDocument()
        {
        }

        public static ChangePriceMutationDocument Instance { get; } = new ChangePriceMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x28, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fb555b9054d3e40ad24c85aa964deb66");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceMutation : global::Prelast.GraphQL.IChangePriceMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IChangePriceResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        public ChangePriceMutation(global::StrawberryShake.IOperationExecutor<IChangePriceResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IChangePriceResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangePriceResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Double price, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(gameId, price);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IChangePriceResult>> Watch(global::System.Int32 gameId, global::System.Double price, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(gameId, price);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 gameId, global::System.Double price)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("gameId", FormatGameId(gameId));
            variables.Add("price", FormatPrice(price));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ChangePriceMutationDocument.Instance.Hash.Value, name: "ChangePrice", document: ChangePriceMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatGameId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ChangePrice GraphQL operation
    /// <code>
    /// mutation ChangePrice($gameId: Int!, $price: Float!) {
    ///   changeGamePriceById(id: $gameId, newPrice: $price) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IChangePriceMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IChangePriceResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Double price, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IChangePriceResult>> Watch(global::System.Int32 gameId, global::System.Double price, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateDevMutationDocument()
        {
        }

        public static CreateDevMutationDocument Instance { get; } = new CreateDevMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x28, 0x24, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1c1cf7c5a4e3dfc5f57f407353211b71");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevMutation : global::Prelast.GraphQL.ICreateDevMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateDevResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CreateDevMutation(global::StrawberryShake.IOperationExecutor<ICreateDevResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateDevResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDevResult>> ExecuteAsync(global::System.String devName, global::System.String countryName, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(devName, countryName);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDevResult>> Watch(global::System.String devName, global::System.String countryName, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(devName, countryName);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String devName, global::System.String countryName)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("devName", FormatDevName(devName));
            variables.Add("countryName", FormatCountryName(countryName));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateDevMutationDocument.Instance.Hash.Value, name: "CreateDev", document: CreateDevMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDevName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCountryName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateDev GraphQL operation
    /// <code>
    /// mutation CreateDev($devName: String!, $countryName: String!) {
    ///   createDeveloper(nameDev: $devName, countryDev: $countryName) {
    ///     __typename
    ///     ... DevelopersInfo
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateDevMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateDevResult>> ExecuteAsync(global::System.String devName, global::System.String countryName, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateDevResult>> Watch(global::System.String devName, global::System.String countryName, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateGameMutationDocument()
        {
        }

        public static CreateGameMutationDocument Instance { get; } = new CreateGameMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x69, 0x64, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x44, 0x65, 0x76, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x44, 0x65, 0x76, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bd26801300232cb3ee7bcc1e990745a3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameMutation : global::Prelast.GraphQL.ICreateGameMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateGameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public CreateGameMutation(global::StrawberryShake.IOperationExecutor<ICreateGameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateGameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGameResult>> ExecuteAsync(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, price, idGenre, idDev);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGameResult>> Watch(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, price, idGenre, idDev);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("price", FormatPrice(price));
            variables.Add("idGenre", FormatIdGenre(idGenre));
            variables.Add("idDev", FormatIdDev(idDev));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateGameMutationDocument.Instance.Hash.Value, name: "CreateGame", document: CreateGameMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPrice(global::System.Double value)
        {
            return _floatFormatter.Format(value);
        }

        private global::System.Object? FormatIdGenre(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatIdDev(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGame GraphQL operation
    /// <code>
    /// mutation CreateGame($name: String!, $price: Float!, $idGenre: Int!, $idDev: Int!) {
    ///   createGameWithDeveloperGenreId(name: $name, price: $price, idGenre: $idGenre, idDev: $idDev) {
    ///     __typename
    ///     ... GamesInfo
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGameMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGameResult>> ExecuteAsync(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGameResult>> Watch(global::System.String name, global::System.Double price, global::System.Int32 idGenre, global::System.Int32 idDev, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateGenreMutationDocument()
        {
        }

        public static CreateGenreMutationDocument Instance { get; } = new CreateGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x67, 0x65, 0x72, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8f34268866fef68412d4b9d16237c1a4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreMutation : global::Prelast.GraphQL.ICreateGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CreateGenreMutation(global::StrawberryShake.IOperationExecutor<ICreateGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGenreResult>> ExecuteAsync(global::System.String name, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGenreResult>> Watch(global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateGenreMutationDocument.Instance.Hash.Value, name: "CreateGenre", document: CreateGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateGenre GraphQL operation
    /// <code>
    /// mutation CreateGenre($name: String!) {
    ///   createGenre(gerneName: $name) {
    ///     __typename
    ///     ... GenreInfo
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateGenreResult>> ExecuteAsync(global::System.String name, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateGenreResult>> Watch(global::System.String name, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelMutationDocument : global::StrawberryShake.IDocument
    {
        private DelDevelMutationDocument()
        {
        }

        public static DelDevelMutationDocument Instance { get; } = new DelDevelMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x24, 0x64, 0x65, 0x76, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x76, 0x49, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "86c99e1250d80eaf92b93377de69f8f6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelMutation : global::Prelast.GraphQL.IDelDevelMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelDevelResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelDevelMutation(global::StrawberryShake.IOperationExecutor<IDelDevelResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelDevelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelDevelResult>> ExecuteAsync(global::System.Int32 devId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(devId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelDevelResult>> Watch(global::System.Int32 devId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(devId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 devId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("devId", FormatDevId(devId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelDevelMutationDocument.Instance.Hash.Value, name: "DelDevel", document: DelDevelMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDevId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelDevel GraphQL operation
    /// <code>
    /// mutation DelDevel($devId: Int!) {
    ///   deleteDevById(id: $devId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelDevelMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelDevelResult>> ExecuteAsync(global::System.Int32 devId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelDevelResult>> Watch(global::System.Int32 devId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameMutationDocument : global::StrawberryShake.IDocument
    {
        private DelGameMutationDocument()
        {
        }

        public static DelGameMutationDocument Instance { get; } = new DelGameMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x28, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "da5bf36230d5c6fa7d61aa326f297c25");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameMutation : global::Prelast.GraphQL.IDelGameMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelGameResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelGameMutation(global::StrawberryShake.IOperationExecutor<IDelGameResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelGameResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGameResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(gameId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGameResult>> Watch(global::System.Int32 gameId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(gameId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 gameId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("gameId", FormatGameId(gameId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelGameMutationDocument.Instance.Hash.Value, name: "DelGame", document: DelGameMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatGameId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGame GraphQL operation
    /// <code>
    /// mutation DelGame($gameId: Int!) {
    ///   deleteGameById(id: $gameId)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGameMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGameResult>> ExecuteAsync(global::System.Int32 gameId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGameResult>> Watch(global::System.Int32 gameId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreMutationDocument : global::StrawberryShake.IDocument
    {
        private DelGenreMutationDocument()
        {
        }

        public static DelGenreMutationDocument Instance { get; } = new DelGenreMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3acb0ed4088ad16772f2e68c4b7cc4c3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreMutation : global::Prelast.GraphQL.IDelGenreMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDelGenreResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DelGenreMutation(global::StrawberryShake.IOperationExecutor<IDelGenreResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDelGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGenreResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DelGenreMutationDocument.Instance.Hash.Value, name: "DelGenre", document: DelGenreMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DelGenre GraphQL operation
    /// <code>
    /// mutation DelGenre($id: Int!) {
    ///   deleteGenreById(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IDelGenreMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDelGenreResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDelGenreResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelQueryDocument()
        {
        }

        public static GetDevelQueryDocument Instance { get; } = new GetDevelQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "35557b3ec02b88b2014418fa90ebd0a8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelQuery : global::Prelast.GraphQL.IGetDevelQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelResult> _operationExecutor;
        public GetDevelQuery(global::StrawberryShake.IOperationExecutor<IGetDevelResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelQueryDocument.Instance.Hash.Value, name: "GetDevel", document: GetDevelQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevel GraphQL operation
    /// <code>
    /// query GetDevel {
    ///   allDeveloper {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDevelWithFiltrQueryDocument()
        {
        }

        public static GetDevelWithFiltrQueryDocument Instance { get; } = new GetDevelWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f7c9d195e1b8c18d522c1fe4a40bb513");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrQuery : global::Prelast.GraphQL.IGetDevelWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDevelWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetDevelWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetDevelWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDevelWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> ExecuteAsync(global::System.String country, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(country);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> Watch(global::System.String country, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(country);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String country)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("country", FormatCountry(country));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDevelWithFiltrQueryDocument.Instance.Hash.Value, name: "GetDevelWithFiltr", document: GetDevelWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCountry(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDevelWithFiltr GraphQL operation
    /// <code>
    /// query GetDevelWithFiltr($country: String!) {
    ///   allDeveloper(where: { country: { eq: $country } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... DevelopersInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment DevelopersInfo on Developers {
    ///   developerId
    ///   name
    ///   country
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetDevelWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> ExecuteAsync(global::System.String country, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult>> Watch(global::System.String country, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesQueryDocument()
        {
        }

        public static GetGamesQueryDocument Instance { get; } = new GetGamesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a2f145ba3893a823a42956d9b36e3a61");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQuery : global::Prelast.GraphQL.IGetGamesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesResult> _operationExecutor;
        public GetGamesQuery(global::StrawberryShake.IOperationExecutor<IGetGamesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesQueryDocument.Instance.Hash.Value, name: "GetGames", document: GetGamesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesWithFiltrQueryDocument()
        {
        }

        public static GetGamesWithFiltrQueryDocument Instance { get; } = new GetGamesWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x7d, 0x20, 0x7d, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x20, 0x41, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6aba118c4864b170277387b1f5c27f31");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrQuery : global::Prelast.GraphQL.IGetGamesWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGamesWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetGamesWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> ExecuteAsync(global::System.String? search, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(search);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> Watch(global::System.String? search, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(search);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? search)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("search", FormatSearch(search));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesWithFiltrQueryDocument.Instance.Hash.Value, name: "GetGamesWithFiltr", document: GetGamesWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSearch(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGamesWithFiltr GraphQL operation
    /// <code>
    /// query GetGamesWithFiltr($search: String) {
    ///   allGameWithDevGerne(where: { name: { startsWith: $search } }, order: { price: ASC }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> ExecuteAsync(global::System.String? search, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult>> Watch(global::System.String? search, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreQueryDocument()
        {
        }

        public static GetGenreQueryDocument Instance { get; } = new GetGenreQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7cd3c0742f69b1826cc9e2c402053adb");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreQuery : global::Prelast.GraphQL.IGetGenreQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreResult> _operationExecutor;
        public GetGenreQuery(global::StrawberryShake.IOperationExecutor<IGetGenreResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreQueryDocument.Instance.Hash.Value, name: "GetGenre", document: GetGenreQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenre GraphQL operation
    /// <code>
    /// query GetGenre {
    ///   allGenre {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGenreWithFiltrQueryDocument()
        {
        }

        public static GetGenreWithFiltrQueryDocument Instance { get; } = new GetGenreWithFiltrQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x72, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x28, 0x77, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x7b, 0x20, 0x65, 0x71, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "19446e97749f81c727e05765559f30b6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrQuery : global::Prelast.GraphQL.IGetGenreWithFiltrQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGenreWithFiltrResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetGenreWithFiltrQuery(global::StrawberryShake.IOperationExecutor<IGetGenreWithFiltrResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGenreWithFiltrResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> ExecuteAsync(global::System.String filtr, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filtr);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> Watch(global::System.String filtr, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filtr);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String filtr)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filtr", FormatFiltr(filtr));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGenreWithFiltrQueryDocument.Instance.Hash.Value, name: "GetGenreWithFiltr", document: GetGenreWithFiltrQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFiltr(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGenreWithFiltr GraphQL operation
    /// <code>
    /// query GetGenreWithFiltr($filtr: String!) {
    ///   allGenre(where: { name: { eq: $filtr } }) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GenreInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GenreInfo on Genre {
    ///   genreId
    ///   name
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGenreWithFiltrQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> ExecuteAsync(global::System.String filtr, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult>> Watch(global::System.String filtr, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClient : global::Prelast.GraphQL.IConferenceClient
    {
        private readonly global::Prelast.GraphQL.IChangeNameDevMutation _changeNameDev;
        private readonly global::Prelast.GraphQL.IChangeNameGenreMutation _changeNameGenre;
        private readonly global::Prelast.GraphQL.IChangePriceMutation _changePrice;
        private readonly global::Prelast.GraphQL.ICreateDevMutation _createDev;
        private readonly global::Prelast.GraphQL.ICreateGameMutation _createGame;
        private readonly global::Prelast.GraphQL.ICreateGenreMutation _createGenre;
        private readonly global::Prelast.GraphQL.IDelDevelMutation _delDevel;
        private readonly global::Prelast.GraphQL.IDelGameMutation _delGame;
        private readonly global::Prelast.GraphQL.IDelGenreMutation _delGenre;
        private readonly global::Prelast.GraphQL.IGetDevelQuery _getDevel;
        private readonly global::Prelast.GraphQL.IGetDevelWithFiltrQuery _getDevelWithFiltr;
        private readonly global::Prelast.GraphQL.IGetGamesQuery _getGames;
        private readonly global::Prelast.GraphQL.IGetGamesWithFiltrQuery _getGamesWithFiltr;
        private readonly global::Prelast.GraphQL.IGetGenreQuery _getGenre;
        private readonly global::Prelast.GraphQL.IGetGenreWithFiltrQuery _getGenreWithFiltr;
        public ConferenceClient(global::Prelast.GraphQL.IChangeNameDevMutation changeNameDev, global::Prelast.GraphQL.IChangeNameGenreMutation changeNameGenre, global::Prelast.GraphQL.IChangePriceMutation changePrice, global::Prelast.GraphQL.ICreateDevMutation createDev, global::Prelast.GraphQL.ICreateGameMutation createGame, global::Prelast.GraphQL.ICreateGenreMutation createGenre, global::Prelast.GraphQL.IDelDevelMutation delDevel, global::Prelast.GraphQL.IDelGameMutation delGame, global::Prelast.GraphQL.IDelGenreMutation delGenre, global::Prelast.GraphQL.IGetDevelQuery getDevel, global::Prelast.GraphQL.IGetDevelWithFiltrQuery getDevelWithFiltr, global::Prelast.GraphQL.IGetGamesQuery getGames, global::Prelast.GraphQL.IGetGamesWithFiltrQuery getGamesWithFiltr, global::Prelast.GraphQL.IGetGenreQuery getGenre, global::Prelast.GraphQL.IGetGenreWithFiltrQuery getGenreWithFiltr)
        {
            _changeNameDev = changeNameDev ?? throw new global::System.ArgumentNullException(nameof(changeNameDev));
            _changeNameGenre = changeNameGenre ?? throw new global::System.ArgumentNullException(nameof(changeNameGenre));
            _changePrice = changePrice ?? throw new global::System.ArgumentNullException(nameof(changePrice));
            _createDev = createDev ?? throw new global::System.ArgumentNullException(nameof(createDev));
            _createGame = createGame ?? throw new global::System.ArgumentNullException(nameof(createGame));
            _createGenre = createGenre ?? throw new global::System.ArgumentNullException(nameof(createGenre));
            _delDevel = delDevel ?? throw new global::System.ArgumentNullException(nameof(delDevel));
            _delGame = delGame ?? throw new global::System.ArgumentNullException(nameof(delGame));
            _delGenre = delGenre ?? throw new global::System.ArgumentNullException(nameof(delGenre));
            _getDevel = getDevel ?? throw new global::System.ArgumentNullException(nameof(getDevel));
            _getDevelWithFiltr = getDevelWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getDevelWithFiltr));
            _getGames = getGames ?? throw new global::System.ArgumentNullException(nameof(getGames));
            _getGamesWithFiltr = getGamesWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getGamesWithFiltr));
            _getGenre = getGenre ?? throw new global::System.ArgumentNullException(nameof(getGenre));
            _getGenreWithFiltr = getGenreWithFiltr ?? throw new global::System.ArgumentNullException(nameof(getGenreWithFiltr));
        }

        public static global::System.String ClientName => "ConferenceClient";
        public global::Prelast.GraphQL.IChangeNameDevMutation ChangeNameDev => _changeNameDev;
        public global::Prelast.GraphQL.IChangeNameGenreMutation ChangeNameGenre => _changeNameGenre;
        public global::Prelast.GraphQL.IChangePriceMutation ChangePrice => _changePrice;
        public global::Prelast.GraphQL.ICreateDevMutation CreateDev => _createDev;
        public global::Prelast.GraphQL.ICreateGameMutation CreateGame => _createGame;
        public global::Prelast.GraphQL.ICreateGenreMutation CreateGenre => _createGenre;
        public global::Prelast.GraphQL.IDelDevelMutation DelDevel => _delDevel;
        public global::Prelast.GraphQL.IDelGameMutation DelGame => _delGame;
        public global::Prelast.GraphQL.IDelGenreMutation DelGenre => _delGenre;
        public global::Prelast.GraphQL.IGetDevelQuery GetDevel => _getDevel;
        public global::Prelast.GraphQL.IGetDevelWithFiltrQuery GetDevelWithFiltr => _getDevelWithFiltr;
        public global::Prelast.GraphQL.IGetGamesQuery GetGames => _getGames;
        public global::Prelast.GraphQL.IGetGamesWithFiltrQuery GetGamesWithFiltr => _getGamesWithFiltr;
        public global::Prelast.GraphQL.IGetGenreQuery GetGenre => _getGenre;
        public global::Prelast.GraphQL.IGetGenreWithFiltrQuery GetGenreWithFiltr => _getGenreWithFiltr;
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IConferenceClient
    {
        global::Prelast.GraphQL.IChangeNameDevMutation ChangeNameDev { get; }

        global::Prelast.GraphQL.IChangeNameGenreMutation ChangeNameGenre { get; }

        global::Prelast.GraphQL.IChangePriceMutation ChangePrice { get; }

        global::Prelast.GraphQL.ICreateDevMutation CreateDev { get; }

        global::Prelast.GraphQL.ICreateGameMutation CreateGame { get; }

        global::Prelast.GraphQL.ICreateGenreMutation CreateGenre { get; }

        global::Prelast.GraphQL.IDelDevelMutation DelDevel { get; }

        global::Prelast.GraphQL.IDelGameMutation DelGame { get; }

        global::Prelast.GraphQL.IDelGenreMutation DelGenre { get; }

        global::Prelast.GraphQL.IGetDevelQuery GetDevel { get; }

        global::Prelast.GraphQL.IGetDevelWithFiltrQuery GetDevelWithFiltr { get; }

        global::Prelast.GraphQL.IGetGamesQuery GetGames { get; }

        global::Prelast.GraphQL.IGetGamesWithFiltrQuery GetGamesWithFiltr { get; }

        global::Prelast.GraphQL.IGetGenreQuery GetGenre { get; }

        global::Prelast.GraphQL.IGetGenreWithFiltrQuery GetGenreWithFiltr { get; }
    }
}

namespace Prelast.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangeNameDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangeNameDevResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangeNameDevResult);
        public ChangeNameDevResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangeNameDevResultInfo info)
            {
                return new ChangeNameDevResult(MapIChangeNameDev_ChangeDevNameById(info.ChangeDevNameById, snapshot));
            }

            throw new global::System.ArgumentException("ChangeNameDevResultInfo expected.");
        }

        private global::Prelast.GraphQL.IChangeNameDev_ChangeDevNameById? MapIChangeNameDev_ChangeDevNameById(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangeNameDev_ChangeDevNameById returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangeNameDev_ChangeDevNameById_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangeNameDevResultInfo(global::Prelast.GraphQL.State.DevelopersData? changeDevNameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeDevNameById = changeDevNameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.DevelopersData? ChangeDevNameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangeNameDevResultInfo(ChangeDevNameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangeNameGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangeNameGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangeNameGenreResult);
        public ChangeNameGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangeNameGenreResultInfo info)
            {
                return new ChangeNameGenreResult(MapIChangeNameGenre_ChangeGenreNameById(info.ChangeGenreNameById, snapshot));
            }

            throw new global::System.ArgumentException("ChangeNameGenreResultInfo expected.");
        }

        private global::Prelast.GraphQL.IChangeNameGenre_ChangeGenreNameById? MapIChangeNameGenre_ChangeGenreNameById(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangeNameGenre_ChangeGenreNameById returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangeNameGenre_ChangeGenreNameById_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangeNameGenreResultInfo(global::Prelast.GraphQL.State.GenreData? changeGenreNameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeGenreNameById = changeGenreNameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.GenreData? ChangeGenreNameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangeNameGenreResultInfo(ChangeGenreNameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ChangePriceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ChangePriceResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IChangePriceResult);
        public ChangePriceResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ChangePriceResultInfo info)
            {
                return new ChangePriceResult(MapIChangePrice_ChangeGamePriceById(info.ChangeGamePriceById, snapshot));
            }

            throw new global::System.ArgumentException("ChangePriceResultInfo expected.");
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById? MapIChangePrice_ChangeGamePriceById(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ChangePriceResultInfo(global::Prelast.GraphQL.State.GamesData? changeGamePriceById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ChangeGamePriceById = changeGamePriceById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.GamesData? ChangeGamePriceById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ChangePriceResultInfo(ChangeGamePriceById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateDevResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateDevResult);
        public CreateDevResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateDevResultInfo info)
            {
                return new CreateDevResult(MapICreateDev_CreateDeveloper(info.CreateDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("CreateDevResultInfo expected.");
        }

        private global::Prelast.GraphQL.ICreateDev_CreateDeveloper? MapICreateDev_CreateDeveloper(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateDev_CreateDeveloper returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateDev_CreateDeveloper_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateDevResultInfo(global::Prelast.GraphQL.State.DevelopersData? createDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateDeveloper = createDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.DevelopersData? CreateDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateDevResultInfo(CreateDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateGameResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateGameResult);
        public CreateGameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateGameResultInfo info)
            {
                return new CreateGameResult(MapICreateGame_CreateGameWithDeveloperGenreId(info.CreateGameWithDeveloperGenreId, snapshot));
            }

            throw new global::System.ArgumentException("CreateGameResultInfo expected.");
        }

        private global::Prelast.GraphQL.ICreateGame_CreateGameWithDeveloperGenreId? MapICreateGame_CreateGameWithDeveloperGenreId(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateGame_CreateGameWithDeveloperGenreId returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateGame_CreateGameWithDeveloperGenreId_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateGameResultInfo(global::Prelast.GraphQL.State.GamesData? createGameWithDeveloperGenreId, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateGameWithDeveloperGenreId = createGameWithDeveloperGenreId;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.GamesData? CreateGameWithDeveloperGenreId { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateGameResultInfo(CreateGameWithDeveloperGenreId, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.CreateGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.ICreateGenreResult);
        public CreateGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateGenreResultInfo info)
            {
                return new CreateGenreResult(MapICreateGenre_CreateGenre(info.CreateGenre, snapshot));
            }

            throw new global::System.ArgumentException("CreateGenreResultInfo expected.");
        }

        private global::Prelast.GraphQL.ICreateGenre_CreateGenre? MapICreateGenre_CreateGenre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateGenre_CreateGenre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateGenre_CreateGenre_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateGenreResultInfo(global::Prelast.GraphQL.State.GenreData? createGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateGenre = createGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.GenreData? CreateGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateGenreResultInfo(CreateGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelDevelResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelDevelResult);
        public DelDevelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelDevelResultInfo info)
            {
                return new DelDevelResult(info.DeleteDevById);
            }

            throw new global::System.ArgumentException("DelDevelResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelDevelResultInfo(global::System.String? deleteDevById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteDevById = deleteDevById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? DeleteDevById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelDevelResultInfo(DeleteDevById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelGameResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelGameResult);
        public DelGameResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelGameResultInfo info)
            {
                return new DelGameResult(info.DeleteGameById);
            }

            throw new global::System.ArgumentException("DelGameResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelGameResultInfo(global::System.String? deleteGameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteGameById = deleteGameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? DeleteGameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelGameResultInfo(DeleteGameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.DelGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DelGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IDelGenreResult);
        public DelGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DelGenreResultInfo info)
            {
                return new DelGenreResult(info.DeleteGenreById);
            }

            throw new global::System.ArgumentException("DelGenreResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DelGenreResultInfo(global::System.String? deleteGenreById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteGenreById = deleteGenreById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? DeleteGenreById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DelGenreResultInfo(DeleteGenreById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelResult);
        public GetDevelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelResultInfo info)
            {
                return new GetDevelResult(MapIGetDevel_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevel_AllDeveloper? MapIGetDevel_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevel_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevel_AllDeveloper_AllDeveloperConnection(MapIGetDevel_AllDeveloper_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>? MapIGetDevel_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevel_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevel_AllDeveloper_Nodes? MapIGetDevel_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevel_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevel_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetDevelWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDevelWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetDevelWithFiltrResult);
        public GetDevelWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDevelWithFiltrResultInfo info)
            {
                return new GetDevelWithFiltrResult(MapIGetDevelWithFiltr_AllDeveloper(info.AllDeveloper, snapshot));
            }

            throw new global::System.ArgumentException("GetDevelWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper? MapIGetDevelWithFiltr_AllDeveloper(global::Prelast.GraphQL.State.AllDeveloperConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithFiltr_AllDeveloper returnValue = default !;
            if (data?.__typename.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithFiltr_AllDeveloper_AllDeveloperConnection(MapIGetDevelWithFiltr_AllDeveloper_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>? MapIGetDevelWithFiltr_AllDeveloper_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes?>();
            foreach (global::Prelast.GraphQL.State.DevelopersData? child in list)
            {
                developerss.Add(MapIGetDevelWithFiltr_AllDeveloper_Nodes(child, snapshot));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.IGetDevelWithFiltr_AllDeveloper_Nodes? MapIGetDevelWithFiltr_AllDeveloper_Nodes(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDevelWithFiltr_AllDeveloper_Nodes returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDevelWithFiltr_AllDeveloper_Nodes_Developers(data.DeveloperId ?? throw new global::System.ArgumentNullException(), data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDevelWithFiltrResultInfo(global::Prelast.GraphQL.State.AllDeveloperConnectionData? allDeveloper, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllDeveloper = allDeveloper;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllDeveloperConnectionData? AllDeveloper { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDevelWithFiltrResultInfo(AllDeveloper, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesResult);
        public GetGamesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesResultInfo info)
            {
                return new GetGamesResult(MapIGetGames_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne? MapIGetGames_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGames_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>? MapIGetGames_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGames_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGames_AllGameWithDevGerne_Nodes? MapIGetGames_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGamesWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGamesWithFiltrResult);
        public GetGamesWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesWithFiltrResultInfo info)
            {
                return new GetGamesWithFiltrResult(MapIGetGamesWithFiltr_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne? MapIGetGamesWithFiltr_AllGameWithDevGerne(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesWithFiltr_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesWithFiltr_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>? MapIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.IGetGamesWithFiltr_AllGameWithDevGerne_Nodes? MapIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(global::Prelast.GraphQL.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGamesWithFiltr_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGamesWithFiltr_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIChangePrice_ChangeGamePriceById_Genre(data.Genre, snapshot), MapIChangePrice_ChangeGamePriceById_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Genre? MapIChangePrice_ChangeGamePriceById_Genre(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Prelast.GraphQL.IChangePrice_ChangeGamePriceById_Developer? MapIChangePrice_ChangeGamePriceById_Developer(global::Prelast.GraphQL.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IChangePrice_ChangeGamePriceById_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ChangePrice_ChangeGamePriceById_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesWithFiltrResultInfo(global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesWithFiltrResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreResult);
        public GetGenreResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreResultInfo info)
            {
                return new GetGenreResult(MapIGetGenre_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenre_AllGenre? MapIGetGenre_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenre_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenre_AllGenre_AllGenreConnection(MapIGetGenre_AllGenre_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>? MapIGetGenre_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenre_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenre_AllGenre_Nodes? MapIGetGenre_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenre_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenre_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.GetGenreWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGenreWithFiltrResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Prelast.GraphQL.IGetGenreWithFiltrResult);
        public GetGenreWithFiltrResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGenreWithFiltrResultInfo info)
            {
                return new GetGenreWithFiltrResult(MapIGetGenreWithFiltr_AllGenre(info.AllGenre, snapshot));
            }

            throw new global::System.ArgumentException("GetGenreWithFiltrResultInfo expected.");
        }

        private global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre? MapIGetGenreWithFiltr_AllGenre(global::Prelast.GraphQL.State.AllGenreConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithFiltr_AllGenre returnValue = default !;
            if (data?.__typename.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithFiltr_AllGenre_AllGenreConnection(MapIGetGenreWithFiltr_AllGenre_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>? MapIGetGenreWithFiltr_AllGenre_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes?>();
            foreach (global::Prelast.GraphQL.State.GenreData? child in list)
            {
                genres.Add(MapIGetGenreWithFiltr_AllGenre_Nodes(child, snapshot));
            }

            return genres;
        }

        private global::Prelast.GraphQL.IGetGenreWithFiltr_AllGenre_Nodes? MapIGetGenreWithFiltr_AllGenre_Nodes(global::Prelast.GraphQL.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGenreWithFiltr_AllGenre_Nodes returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGenreWithFiltr_AllGenre_Nodes_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGenreWithFiltrResultInfo(global::Prelast.GraphQL.State.AllGenreConnectionData? allGenre, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGenre = allGenre;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Prelast.GraphQL.State.AllGenreConnectionData? AllGenre { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGenreWithFiltrResultInfo(AllGenre, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameDevBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangeNameDevBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameDevResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangeNameDevResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangeNameDevResult Result, ChangeNameDevResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangeNameDevResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangeNameDevResult, ChangeNameDevResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangeNameDevResultInfo(DeserializeIChangeNameDev_ChangeDevNameById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeDevNameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangeNameDev_ChangeDevNameById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangeNameGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangeNameGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangeNameGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangeNameGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangeNameGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangeNameGenreResult Result, ChangeNameGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangeNameGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangeNameGenreResult, ChangeNameGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangeNameGenreResultInfo(DeserializeIChangeNameGenre_ChangeGenreNameById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeGenreNameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangeNameGenre_ChangeGenreNameById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ChangePriceBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IChangePriceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ChangePriceBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IChangePriceResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IChangePriceResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IChangePriceResult Result, ChangePriceResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IChangePriceResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IChangePriceResult, ChangePriceResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ChangePriceResultInfo(DeserializeIChangePrice_ChangeGamePriceById(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changeGamePriceById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIChangePrice_ChangeGamePriceById(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateDevBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateDevResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateDevBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateDevResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateDevResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateDevResult Result, CreateDevResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateDevResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateDevResult, CreateDevResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateDevResultInfo(DeserializeICreateDev_CreateDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeICreateDev_CreateDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateGameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateGameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateGameResult Result, CreateGameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateGameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateGameResult, CreateGameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateGameResultInfo(DeserializeICreateGame_CreateGameWithDeveloperGenreId(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createGameWithDeveloperGenreId")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeICreateGame_CreateGameWithDeveloperGenreId(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.ICreateGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.ICreateGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateGenreResult Result, CreateGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateGenreResult, CreateGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateGenreResultInfo(DeserializeICreateGenre_CreateGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeICreateGenre_CreateGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelDevelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DelDevelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelDevelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelDevelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelDevelResult Result, DelDevelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelDevelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelDevelResult, DelDevelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelDevelResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteDevById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGameBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGameResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DelGameBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGameResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelGameResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelGameResult Result, DelGameResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelGameResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelGameResult, DelGameResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelGameResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteGameById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DelGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IDelGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DelGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IDelGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDelGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDelGenreResult Result, DelGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDelGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDelGenreResult, DelGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DelGenreResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteGenreById")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetDevelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelResult Result, GetDevelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelResult, GetDevelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelResultInfo(DeserializeIGetDevel_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevel_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevel_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevel_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevel_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevel_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetDevelWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetDevelWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetDevelWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetDevelWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDevelWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDevelWithFiltrResult Result, GetDevelWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetDevelWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDevelWithFiltrResult, GetDevelWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDevelWithFiltrResultInfo(DeserializeIGetDevelWithFiltr_AllDeveloper(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allDeveloper")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllDeveloperConnectionData? DeserializeIGetDevelWithFiltr_AllDeveloper(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllDeveloperConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllDeveloperConnectionData(typename, nodes: DeserializeIGetDevelWithFiltr_AllDeveloper_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? DeserializeIGetDevelWithFiltr_AllDeveloper_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var developerss = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.DevelopersData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                developerss.Add(DeserializeIGetDevelWithFiltr_AllDeveloper_Nodes(child));
            }

            return developerss;
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIGetDevelWithFiltr_AllDeveloper_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, developerId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developerId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetGamesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesResult Result, GetGamesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesResult, GetGamesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesResultInfo(DeserializeIGetGames_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGames_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGames_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGames_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGamesWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetGamesWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGamesWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesWithFiltrResult Result, GetGamesWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesWithFiltrResult, GetGamesWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesWithFiltrResultInfo(DeserializeIGetGamesWithFiltr_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::Prelast.GraphQL.State.GamesData? DeserializeIGetGamesWithFiltr_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIChangePrice_ChangeGamePriceById_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIChangePrice_ChangeGamePriceById_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIChangePrice_ChangeGamePriceById_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Prelast.GraphQL.State.DevelopersData? DeserializeIChangePrice_ChangeGamePriceById_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetGenreBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreResult Result, GetGenreResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreResult, GetGenreResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreResultInfo(DeserializeIGetGenre_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenre_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenre_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenre_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenre_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenre_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGenreWithFiltrBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Prelast.GraphQL.IGetGenreWithFiltrResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetGenreWithFiltrBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Prelast.GraphQL.IGetGenreWithFiltrResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGenreWithFiltrResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGenreWithFiltrResult Result, GetGenreWithFiltrResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGenreWithFiltrResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGenreWithFiltrResult, GetGenreWithFiltrResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGenreWithFiltrResultInfo(DeserializeIGetGenreWithFiltr_AllGenre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGenre")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Prelast.GraphQL.State.AllGenreConnectionData? DeserializeIGetGenreWithFiltr_AllGenre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGenreConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.AllGenreConnectionData(typename, nodes: DeserializeIGetGenreWithFiltr_AllGenre_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? DeserializeIGetGenreWithFiltr_AllGenre_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var genres = new global::System.Collections.Generic.List<global::Prelast.GraphQL.State.GenreData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeIGetGenreWithFiltr_AllGenre_Nodes(child));
            }

            return genres;
        }

        private global::Prelast.GraphQL.State.GenreData? DeserializeIGetGenreWithFiltr_AllGenre_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Prelast.GraphQL.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DevelopersData
    {
        public DevelopersData(global::System.String __typename, global::System.Int32? developerId = default !, global::System.String? name = default !, global::System.String? country = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DeveloperId = developerId;
            Name = name;
            Country = country;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? DeveloperId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GenreData
    {
        public GenreData(global::System.String __typename, global::System.Int32? genreId = default !, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GenreId = genreId;
            Name = name;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? GenreId { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GamesData
    {
        public GamesData(global::System.String __typename, global::System.Int32? gamesId = default !, global::System.String? name = default !, global::System.Double? price = default !, global::Prelast.GraphQL.State.GenreData? genre = default !, global::Prelast.GraphQL.State.DevelopersData? developer = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double? Price { get; }

        public global::Prelast.GraphQL.State.GenreData? Genre { get; }

        public global::Prelast.GraphQL.State.DevelopersData? Developer { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllDeveloperConnectionData
    {
        public AllDeveloperConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.DevelopersData?>? Nodes { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllGameWithDevGerneConnectionData
    {
        public AllGameWithDevGerneConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GamesData?>? Nodes { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllGenreConnectionData
    {
        public AllGenreConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Prelast.GraphQL.State.GenreData?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ConferenceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
