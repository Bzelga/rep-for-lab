@page "/"
@inject ConferenceClient ConferenceClient;
@implements IDisposable
@inject ILogger<Index> logger;

<h1>Игры</h1>
<div>
    <div>Поиск по названию</div>
    <input @bind-value="@filtr" />
    <button @onclick="OnSearch">Поиск</button>
</div>

<div>
    <div>Количество элементов на странице</div>
    <input type="number" @bind-value="@itemInPage" />
    <button @onclick="OnChangeCountItem">Изменить</button>
</div>

@if (games.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(numberPage > 1)
    {
        <button @onclick="OnPrevPage">Предыдущая страница</button>
    }
    @if(hasNextPage)
    {
        <button @onclick="OnNextPage">Следующая страница</button>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Название игры</th>                
                <th>Цена</th>                
                <th>Жанр</th>                
                <th>Название студии</th>    
                <th>Страна студии</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td><button @onclick="() => OnChangePriceGame(game)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button> @game.Name</td>                   
                    <td>@game.Price</td>                   
                    <td>@game.Genre.Name</td>                   
                    <td>@game.Developer.Name</td>
                    <td>@game.Developer.Country <button @onclick="() => OnDeleteGame(game)">X</button></td>
                </tr>
            }
        </tbody>
    </table>

    @if (selectedGame is not null)
    {
        <br />
        <p>Введите новую цену:</p>
        <input @bind-value="@price" />
        <button @onclick="OnChangePrice">Сохранить</button>
    }
}

@if(!create)
    {
        <br />
        <button @onclick="OnAddGame">Добавить игру</button>
    }
    else
    {
        <div>Введите название</div>
        <input @bind-value="@name" />
        <div>Введите цену</div>
        <input @bind-value="@price" />
        <select onchange=@ChangeGenre>
        @foreach (var genr in genres)
        {
            <option value=@genr.GenreId>@genr.Name</option>
        }
        </select>
        <select onchange=@ChangeDevel>
        @foreach (var dev in developers)
        {
            <option value=@dev.DeveloperId>@dev.Name</option>
        }
        </select>
        <button @onclick="OnCreateGame">Сохранить</button>

    }

@code {
    private IReadOnlyList<IGamesInfo> games = Array.Empty<IGamesInfo>();
    private IReadOnlyList<IGenreInfo> genres = Array.Empty<IGenreInfo>();
    private IReadOnlyList<IDevelopersInfo> developers = Array.Empty<IDevelopersInfo>();

    private IDisposable storeSessionGames;
    private IDisposable storeSessionGenre;
    private IDisposable storeSessionDev;

    private IGamesInfo selectedGame;
    private int selectedGenreId;
    private int selectedDevId;

    private string name;
    private double price;
    private string filtr = "";
    private bool create = false;
    private int itemInPage = 15;
    private string coursor = null;
    private bool hasNextPage;
    private int numberPage = 1;

    protected override async Task OnInitializedAsync()
    {
        //добавить здесь, как в других закоменчинных страничках
        storeSessionGames =
            ConferenceClient
                .GetGames
                .Watch(itemInPage, StrawberryShake.ExecutionStrategy.CacheFirst)
                .Where(t => !t.Errors.Any())
                .Select(t => t.Data!.AllGameWithDevGerne!)
                .Subscribe(result =>
                {
                    games = result.Nodes;
                    coursor = result.PageInfo.EndCursor;
                    hasNextPage = result.PageInfo.HasNextPage;
                    StateHasChanged();
                });

        storeSessionGenre =
            ConferenceClient
            .GetGenre
            .Watch(ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data!.AllGenre!.Nodes)
            .Subscribe(result =>
            {
                genres = result;
                selectedGenreId = result[0].GenreId;
                StateHasChanged();
            });

        storeSessionDev =
            ConferenceClient
            .GetDevel
            .Watch(ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data!.AllDeveloper!.Nodes)
            .Subscribe(result =>
            {
                developers = result;
                selectedDevId = result[0].DeveloperId;
                StateHasChanged();
            });
    }

    private void OnChangePriceGame(IGamesInfo game)
    {
        selectedGame = game;
        price = game.Price;
        StateHasChanged();
    }

    private void OnAddGame()
    {
        create = true;
    }

    private async void OnDeleteGame(IGamesInfo game)
    {
        var res = await ConferenceClient.DelGame.ExecuteAsync(game.GamesId);
        games = res.Data!.DeleteGameById!;
        StateHasChanged();
    }

    private async Task OnChangePrice()
    {
        var res = await ConferenceClient.ChangePrice.ExecuteAsync(selectedGame.GamesId, price);
        games = res.Data!.ChangeGamePriceById!;
        selectedGame = null;
        price = 0;
        StateHasChanged();
    }

    private void ChangeGenre(ChangeEventArgs e)
    {
        selectedGenreId = Convert.ToInt32(e.Value);
    }

    private void ChangeDevel(ChangeEventArgs e)
    {
        selectedDevId = Convert.ToInt32(e.Value);
    }

    private async Task OnCreateGame()
    {
        var res = await ConferenceClient.CreateGame.ExecuteAsync(name, price, selectedGenreId, selectedDevId);
        games = res.Data!.CreateGameWithDeveloperGenreId!;
        name = null;
        selectedGenreId = genres[0].GenreId;
        selectedDevId = developers[0].DeveloperId;
        price = 0;
        create = false;
        StateHasChanged();
    }

    private async void OnSearch()
    {
        var result = await ConferenceClient.GetGamesWithFiltr.ExecuteAsync(filtr);
        games = result.Data!.AllGameWithDevGerne!.Nodes;
        StateHasChanged();
    }

    private async void OnPrevPage()
    {
        var result = await ConferenceClient.GetGamesPrevPage.ExecuteAsync(itemInPage, coursor);
        games = result.Data!.AllGameWithDevGerne!.Nodes;
        coursor = result.Data!.AllGameWithDevGerne!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGameWithDevGerne!.PageInfo.HasNextPage;
        numberPage--;
        StateHasChanged();
    }

    private async void OnNextPage()
    {
        var result = await ConferenceClient.GetGamesNextPage.ExecuteAsync(itemInPage, coursor);
        games = result.Data!.AllGameWithDevGerne!.Nodes;
        coursor = result.Data!.AllGameWithDevGerne!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGameWithDevGerne!.PageInfo.HasNextPage;
        numberPage++;
        StateHasChanged();
    }

    private async void OnChangeCountItem()
    {
        var result = await ConferenceClient.GetGames.ExecuteAsync(itemInPage);
        games = result.Data!.AllGameWithDevGerne!.Nodes;
        coursor = result.Data!.AllGameWithDevGerne!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGameWithDevGerne!.PageInfo.HasNextPage;
        numberPage = 1;
    }

    public void Dispose()
    {
        storeSessionGames?.Dispose();
        storeSessionGenre?.Dispose();
        storeSessionDev?.Dispose();
    }
}

