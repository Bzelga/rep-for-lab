@page "/developers"
@inject ConferenceClient ConferenceClient;

<h1>Разработчики</h1>

<div>
    <div>Поиск по стране</div>
    <input @bind-value="@filtr" />
    <button @onclick="OnSearch">Поиск</button>
</div>

<div>
    <div>Количество элементов на странице</div>
    <input type="number" @bind-value="@itemInPage" />
    <button @onclick="OnChangeCountItem">Изменить</button>
</div>

@if (developers.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(numberPage > 1)
    {
        <button @onclick="OnPrevPage">Предыдущая страница</button>
    }
    @if(hasNextPage)
    {
        <button @onclick="OnNextPage">Следующая страница</button>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Название</th>                
                <th>Страна</th>                
            </tr>
        </thead>
        <tbody>
            @foreach (var dev in developers)
            {
                <tr>
                    <td><button @onclick="() => OnChangeNameDev(dev)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button> @dev.Name</td>                   
                    <td>@dev.Country <button @onclick="() => OnDeleteDev(dev)">X</button></td>                   
                </tr>
            }
        </tbody>
    </table>

    @if (selectedDev is not null)
    {
        <br />
        <p>Введите новое название:</p>
        <input @bind-value="@name" />
        <button @onclick="OnChangeName">Save</button>
    }
}

@if(!create)
    {
        <br />
        <button @onclick="OnAddDev">Добавить разработчика</button>
    }
    else
    {
        <div>Введите название</div>
        <input @bind-value="@name" />
        <div>Введите страну</div>
        <input @bind-value="@country" />
        <button @onclick="OnCreateDev">Save</button>

    }

@code {
    private IReadOnlyList<IDevelopersInfo> developers = Array.Empty<IDevelopersInfo>();

    private IDevelopersInfo selectedDev;

    private IDisposable storeSessionDev;

    private string name;
    private string country;
    private string filtr = "";
    private bool create = false;
    private int itemInPage = 15;
    private string coursor = null;
    private bool hasNextPage;
    private int numberPage = 1;

    protected override async Task OnInitializedAsync()
    {
        //var result = await ConferenceClient.GetDevelWithPaging.ExecuteAsync(itemInPage);
        //developers = result.Data!.AllDeveloper!.Nodes;
        //coursor = result.Data!.AllDeveloper!.PageInfo.EndCursor;
        //hasNextPage = result.Data!.AllDeveloper!.PageInfo.HasNextPage;
        //StateHasChanged();

        storeSessionDev =
            ConferenceClient
            .GetDevelWithPaging
            .Watch(itemInPage, ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data!.AllDeveloper!)
            .Subscribe(result =>
            {
                developers = result.Nodes;
                coursor = result.PageInfo.EndCursor;
                hasNextPage = result.PageInfo.HasNextPage;
                StateHasChanged();
            });
    }

    private async void OnDeleteDev(IDevelopersInfo dev)
    {
        var res = await ConferenceClient.DelDevel.ExecuteAsync(dev.DeveloperId);
        developers = res.Data!.DeleteDevById!;
        StateHasChanged();
    }

    private void OnChangeNameDev(IDevelopersInfo dev)
    {
        selectedDev = dev;
        name = dev.Name;
        StateHasChanged();
    }

    private async Task OnChangeName()
    {
        var res = await ConferenceClient.ChangeNameDev.ExecuteAsync(selectedDev.DeveloperId, name);
        developers = res.Data!.ChangeDevNameById!;
        selectedDev = null;
        name = null;
        StateHasChanged();
    }

    private void OnAddDev()
    {
        create = true;
    }

    private async Task OnCreateDev()
    {
        var res = await ConferenceClient.CreateDev.ExecuteAsync(name, country);
        developers = res.Data!.CreateDeveloper!;
        name = null;
        country = null;
        create = false;
        StateHasChanged();
    }

    private async void OnSearch()
    {
        var result = await ConferenceClient.GetDevelWithFiltr.ExecuteAsync(filtr);
        developers = result.Data!.AllDeveloper!.Nodes;
        StateHasChanged();
    }

    private async void OnPrevPage()
    {
        var result = await ConferenceClient.GetDevelPrevPage.ExecuteAsync(itemInPage, coursor);
        developers = result.Data!.AllDeveloper!.Nodes;
        coursor = result.Data!.AllDeveloper!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllDeveloper!.PageInfo.HasNextPage;
        numberPage--;
        StateHasChanged();
    }

    private async void OnNextPage()
    {
        var result = await ConferenceClient.GetDevelNextPage.ExecuteAsync(itemInPage, coursor);
        developers = result.Data!.AllDeveloper!.Nodes;
        coursor = result.Data!.AllDeveloper!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllDeveloper!.PageInfo.HasNextPage;
        numberPage++;
        StateHasChanged();
    }

    private async void OnChangeCountItem()
    {
        var result = await ConferenceClient.GetDevelWithPaging.ExecuteAsync(itemInPage);
        developers = result.Data!.AllDeveloper!.Nodes;
        coursor = result.Data!.AllDeveloper!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllDeveloper!.PageInfo.HasNextPage;
        numberPage = 1;
    }
}
