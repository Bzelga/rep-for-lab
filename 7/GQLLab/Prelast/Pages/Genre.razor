@page "/genre"
@inject ConferenceClient ConferenceClient;

<h1>Жанры</h1>

<div>
    <div>Поиск по названию</div>
    <input @bind-value="@filtr" />
    <button @onclick="OnSearch">Поиск</button>
</div>

<div>
    <div>Количество элементов на странице</div>
    <input type="number" @bind-value="@itemInPage" />
    <button @onclick="OnChangeCountItem">Изменить</button>
</div>

@if (genres.Count == 0)
{
    <p><em>Загрузка...</em></p>
}
else
{
    @if(numberPage > 1)
    {
        <button @onclick="OnPrevPage">Предыдущая страница</button>
    }
    @if(hasNextPage)
    {
        <button @onclick="OnNextPage">Следующая страница</button>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Название</th>                              
            </tr>
        </thead>
        <tbody>
            @foreach (var gen in genres)
            {
                <tr>
                    <td><button @onclick="() => OnChangeNameGenre(gen)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button> @gen.Name <button @onclick="() => OnDeleteGenre(gen)">X</button></td>                   
                </tr>
            }
        </tbody>
    </table>

    @if (selectedGenre is not null)
    {
        <br />
        <p>Введите новое название:</p>
        <input @bind-value="@name" />
        <button @onclick="OnChangeName">Сохранить</button>
    }
}

@if(!create)
    {
        <br />
        <button @onclick="OnAddGenre">Добавить жанр</button>
    }
    else
    {
        <div>Введите название</div>
        <input @bind-value="@name" />
        <button @onclick="OnCreateGenre">Сохранить</button>

    }

@code {
    private IReadOnlyList<IGenreInfo> genres = Array.Empty<IGenreInfo>();

    private IDisposable storeSessionGenre;

    private IGenreInfo selectedGenre;

    private string name;
    private string filtr = "";
    private bool create = false;
    private int itemInPage = 15;
    private string coursor = null;
    private bool hasNextPage;
    private int numberPage = 1;

    protected override async Task OnInitializedAsync()
    {
        storeSessionGenre =
            ConferenceClient
            .GetGenreWithPaging
            .Watch(itemInPage, ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data!.AllGenre!)
            .Subscribe(result =>
            {
                genres = result.Nodes;
                coursor = result.PageInfo.EndCursor;
                hasNextPage = result.PageInfo.HasNextPage;
                StateHasChanged();
            });


        //var result = await ConferenceClient.GetGenreWithPaging.ExecuteAsync(itemInPage);
        //genres = result.Data!.AllGenre!.Nodes;
        //coursor = result.Data!.AllGenre!.PageInfo.EndCursor;
        //hasNextPage = result.Data!.AllGenre!.PageInfo.HasNextPage;
        //StateHasChanged();
    }

    private async void OnDeleteGenre(IGenreInfo gen)
    {
        var res = await ConferenceClient.DelGenre.ExecuteAsync(gen.GenreId);
        genres = res.Data!.DeleteGenreById!;
        StateHasChanged();
    }

    private void OnChangeNameGenre(IGenreInfo gen)
    {
        selectedGenre = gen;
        name = gen.Name;
        StateHasChanged();
    }

    private async Task OnChangeName()
    {
        var res = await ConferenceClient.ChangeNameGenre.ExecuteAsync(selectedGenre.GenreId, name);
        genres = res.Data!.ChangeGenreNameById!;
        selectedGenre = null;
        name = null;
        StateHasChanged();
    }

    private void OnAddGenre()
    {
        create = true;
    }

    private async Task OnCreateGenre()
    {
        var res = await ConferenceClient.CreateGenre.ExecuteAsync(name);
        genres = res.Data!.CreateGenre!;
        name = null;
        create = false;
        StateHasChanged();
    }

    private async void OnSearch()
    {
        var result = await ConferenceClient.GetGenreWithFiltr.ExecuteAsync(filtr);
        genres = result.Data!.AllGenre!.Nodes;
        StateHasChanged();
    }

    private async void OnPrevPage()
    {
        var result = await ConferenceClient.GetGenrePrevPage.ExecuteAsync(itemInPage, coursor);
        genres = result.Data!.AllGenre!.Nodes;
        coursor = result.Data!.AllGenre!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGenre!.PageInfo.HasNextPage;
        numberPage--;
        StateHasChanged();
    }

    private async void OnNextPage()
    {
        var result = await ConferenceClient.GetGenreNextPage.ExecuteAsync(itemInPage, coursor);
        genres = result.Data!.AllGenre!.Nodes;
        coursor = result.Data!.AllGenre!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGenre!.PageInfo.HasNextPage;
        numberPage++;
        StateHasChanged();
    }

    private async void OnChangeCountItem()
    {
        var result = await ConferenceClient.GetGenreWithPaging.ExecuteAsync(itemInPage);
        genres = result.Data!.AllGenre!.Nodes;
        coursor = result.Data!.AllGenre!.PageInfo.EndCursor;
        hasNextPage = result.Data!.AllGenre!.PageInfo.HasNextPage;
        numberPage = 1;
    }
}
