@page "/"
@inject ConferenceClient ConferenceClient;
@implements IDisposable

<h1>Игры</h1>

@if (games.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Название игры</th>                
                <th>Цена</th>                
                <th>Жанр</th>                
                <th>Название студии</th>    
                <th>Страна студии</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in games)
            {
                <tr>
                    <td><button @onclick="() => OnClickGame(game)"><span class="oi oi-pencil mr-2" aria-hidden="true"></span></button> @game.Name</td>                   
                    <td>@game.Price</td>                   
                    <td>@game.Genre.Name</td>                   
                    <td>@game.Developer.Name</td>
                    <td>@game.Developer.Country</td>
                </tr>
            }
        </tbody>
    </table>

    @if (selectedGame is not null)
{
    <br />
    <p>Edit Session Title:</p>
    <input @bind-value="@price" />
    <button @onclick="OnSavePrice">Save</button>
}
}

@code {
    private IReadOnlyList<IGamesInfo> games = Array.Empty<IGamesInfo>();
    private IDisposable storeSession;
    private IGamesInfo selectedGame;
    private double price;

    protected override async Task OnInitializedAsync()
    {

        storeSession =
            ConferenceClient
            .GetGames
            .Watch(ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data!.AllGameWithDevGerne!.Nodes)
            .Subscribe(result =>
            {
                games = result;
                StateHasChanged();
            });
    }

    private void OnClickGame(IGamesInfo game)
    {
        selectedGame = game;
        price = game.Price;
        StateHasChanged();
    }

    private async Task OnSavePrice()
    {
        await ConferenceClient.
    }

    public void Dispose()
    {
        storeSession?.Dispose();
    }
}

