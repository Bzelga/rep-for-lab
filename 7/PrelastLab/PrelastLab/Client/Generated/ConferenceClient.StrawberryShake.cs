// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class ConferenceClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::PrelastLab.Client.State.ConferenceClientStoreAccessor> AddConferenceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::PrelastLab.Client.State.ConferenceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.GetGamesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.ConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.IConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::PrelastLab.Client.State.ConferenceClientStoreAccessor>("ConferenceClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ConferenceClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::PrelastLab.Client.IGetGamesResult>, global::PrelastLab.Client.State.GetGamesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::PrelastLab.Client.IGetGamesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.IGetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PrelastLab.Client.IGetGamesResult>, global::PrelastLab.Client.State.GetGamesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::PrelastLab.Client.IGetGamesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::PrelastLab.Client.IGetGamesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PrelastLab.Client.IGetGamesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PrelastLab.Client.GetGamesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PrelastLab.Client.IGetGamesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.GetGamesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::PrelastLab.Client.State.ConferenceClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PrelastLab.Client.ConferenceClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::PrelastLab.Client.IConferenceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::PrelastLab.Client.ConferenceClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace PrelastLab.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResult : global::System.IEquatable<GetGamesResult>, IGetGamesResult
    {
        public GetGamesResult(global::PrelastLab.Client.IGetGames_AllGameWithDevGerne? allGameWithDevGerne)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
        }

        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }

        public virtual global::System.Boolean Equals(GetGamesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AllGameWithDevGerne is null && other.AllGameWithDevGerne is null) || AllGameWithDevGerne != null && AllGameWithDevGerne.Equals(other.AllGameWithDevGerne)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGamesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AllGameWithDevGerne != null)
                {
                    hash ^= 397 * AllGameWithDevGerne.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : global::System.IEquatable<GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection>, IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection
    {
        public GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Games : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Games>, IGetGames_AllGameWithDevGerne_Nodes_Games
    {
        public GetGames_AllGameWithDevGerne_Nodes_Games(global::System.Int32 gamesId, global::System.String? name, global::System.Double price, global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Genre? genre, global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Developer? developer)
        {
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Genre? Genre { get; }

        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Developer? Developer { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Games? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GamesId == other.GamesId) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Price == other.Price && ((Genre is null && other.Genre is null) || Genre != null && Genre.Equals(other.Genre)) && ((Developer is null && other.Developer is null) || Developer != null && Developer.Equals(other.Developer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Games)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GamesId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Price.GetHashCode();
                if (Genre != null)
                {
                    hash ^= 397 * Genre.GetHashCode();
                }

                if (Developer != null)
                {
                    hash ^= 397 * Developer.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Genre_Genre : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Genre_Genre>, IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre
    {
        public GetGames_AllGameWithDevGerne_Nodes_Genre_Genre(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Genre_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Genre_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGames_AllGameWithDevGerne_Nodes_Developer_Developers : global::System.IEquatable<GetGames_AllGameWithDevGerne_Nodes_Developer_Developers>, IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers
    {
        public GetGames_AllGameWithDevGerne_Nodes_Developer_Developers(global::System.String? name, global::System.String? country)
        {
            Name = name;
            Country = country;
        }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }

        public virtual global::System.Boolean Equals(GetGames_AllGameWithDevGerne_Nodes_Developer_Developers? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Country is null && other.Country is null) || Country != null && Country.Equals(other.Country));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGames_AllGameWithDevGerne_Nodes_Developer_Developers)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Country != null)
                {
                    hash ^= 397 * Country.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesResult
    {
        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne? AllGameWithDevGerne { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection : IGetGames_AllGameWithDevGerne
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGamesInfo
    {
        public global::System.Int32 GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double Price { get; }

        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Genre? Genre { get; }

        public global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Developer? Developer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes : IGamesInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Games : IGetGames_AllGameWithDevGerne_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Genre_Genre : IGetGames_AllGameWithDevGerne_Nodes_Genre
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGames_AllGameWithDevGerne_Nodes_Developer_Developers : IGetGames_AllGameWithDevGerne_Nodes_Developer
    {
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGamesQueryDocument()
        {
        }

        public static GetGamesQueryDocument Instance { get; } = new GetGamesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x47, 0x65, 0x72, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a2f145ba3893a823a42956d9b36e3a61");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesQuery : global::PrelastLab.Client.IGetGamesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGamesResult> _operationExecutor;
        public GetGamesQuery(global::StrawberryShake.IOperationExecutor<IGetGamesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGamesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGamesQueryDocument.Instance.Hash.Value, name: "GetGames", document: GetGamesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGames GraphQL operation
    /// <code>
    /// query GetGames {
    ///   allGameWithDevGerne {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... GamesInfo
    ///     }
    ///   }
    /// }
    /// 
    /// fragment GamesInfo on Games {
    ///   gamesId
    ///   name
    ///   price
    ///   genre {
    ///     __typename
    ///     name
    ///   }
    ///   developer {
    ///     __typename
    ///     name
    ///     country
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetGamesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGamesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGamesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClient : global::PrelastLab.Client.IConferenceClient
    {
        private readonly global::PrelastLab.Client.IGetGamesQuery _getGames;
        public ConferenceClient(global::PrelastLab.Client.IGetGamesQuery getGames)
        {
            _getGames = getGames ?? throw new global::System.ArgumentNullException(nameof(getGames));
        }

        public static global::System.String ClientName => "ConferenceClient";
        public global::PrelastLab.Client.IGetGamesQuery GetGames => _getGames;
    }

    /// <summary>
    /// Represents the ConferenceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IConferenceClient
    {
        global::PrelastLab.Client.IGetGamesQuery GetGames { get; }
    }
}

namespace PrelastLab.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::PrelastLab.Client.GetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGamesResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::PrelastLab.Client.IGetGamesResult);
        public GetGamesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGamesResultInfo info)
            {
                return new GetGamesResult(MapIGetGames_AllGameWithDevGerne(info.AllGameWithDevGerne, snapshot));
            }

            throw new global::System.ArgumentException("GetGamesResultInfo expected.");
        }

        private global::PrelastLab.Client.IGetGames_AllGameWithDevGerne? MapIGetGames_AllGameWithDevGerne(global::PrelastLab.Client.State.AllGameWithDevGerneConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne returnValue = default !;
            if (data?.__typename.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_AllGameWithDevGerneConnection(MapIGetGames_AllGameWithDevGerne_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes?>? MapIGetGames_AllGameWithDevGerne_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.State.GamesData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes?>();
            foreach (global::PrelastLab.Client.State.GamesData? child in list)
            {
                gamess.Add(MapIGetGames_AllGameWithDevGerne_Nodes(child, snapshot));
            }

            return gamess;
        }

        private global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes? MapIGetGames_AllGameWithDevGerne_Nodes(global::PrelastLab.Client.State.GamesData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne_Nodes returnValue = default !;
            if (data?.__typename.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_Nodes_Games(data.GamesId ?? throw new global::System.ArgumentNullException(), data.Name, data.Price ?? throw new global::System.ArgumentNullException(), MapIGetGames_AllGameWithDevGerne_Nodes_Genre(data.Genre, snapshot), MapIGetGames_AllGameWithDevGerne_Nodes_Developer(data.Developer, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Genre? MapIGetGames_AllGameWithDevGerne_Nodes_Genre(global::PrelastLab.Client.State.GenreData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne_Nodes_Genre returnValue = default !;
            if (data?.__typename.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_Nodes_Genre_Genre(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::PrelastLab.Client.IGetGames_AllGameWithDevGerne_Nodes_Developer? MapIGetGames_AllGameWithDevGerne_Nodes_Developer(global::PrelastLab.Client.State.DevelopersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGames_AllGameWithDevGerne_Nodes_Developer returnValue = default !;
            if (data?.__typename.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGames_AllGameWithDevGerne_Nodes_Developer_Developers(data.Name, data.Country);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGamesResultInfo(global::PrelastLab.Client.State.AllGameWithDevGerneConnectionData? allGameWithDevGerne, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AllGameWithDevGerne = allGameWithDevGerne;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::PrelastLab.Client.State.AllGameWithDevGerneConnectionData? AllGameWithDevGerne { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGamesResultInfo(AllGameWithDevGerne, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetGamesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::PrelastLab.Client.IGetGamesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::PrelastLab.Client.IGetGamesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetGamesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::PrelastLab.Client.IGetGamesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGamesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGamesResult Result, GetGamesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGamesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGamesResult, GetGamesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGamesResultInfo(DeserializeIGetGames_AllGameWithDevGerne(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allGameWithDevGerne")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::PrelastLab.Client.State.AllGameWithDevGerneConnectionData? DeserializeIGetGames_AllGameWithDevGerne(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AllGameWithDevGerneConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PrelastLab.Client.State.AllGameWithDevGerneConnectionData(typename, nodes: DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.State.GamesData?>? DeserializeIGetGames_AllGameWithDevGerne_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var gamess = new global::System.Collections.Generic.List<global::PrelastLab.Client.State.GamesData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                gamess.Add(DeserializeIGetGames_AllGameWithDevGerne_Nodes(child));
            }

            return gamess;
        }

        private global::PrelastLab.Client.State.GamesData? DeserializeIGetGames_AllGameWithDevGerne_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Games", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PrelastLab.Client.State.GamesData(typename, gamesId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gamesId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), price: DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), genre: DeserializeIGetGames_AllGameWithDevGerne_Nodes_Genre(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genre")), developer: DeserializeIGetGames_AllGameWithDevGerne_Nodes_Developer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "developer")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::PrelastLab.Client.State.GenreData? DeserializeIGetGames_AllGameWithDevGerne_Nodes_Genre(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PrelastLab.Client.State.GenreData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::PrelastLab.Client.State.DevelopersData? DeserializeIGetGames_AllGameWithDevGerne_Nodes_Developer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Developers", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::PrelastLab.Client.State.DevelopersData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), country: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "country")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AllGameWithDevGerneConnectionData
    {
        public AllGameWithDevGerneConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.State.GamesData?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::PrelastLab.Client.State.GamesData?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GamesData
    {
        public GamesData(global::System.String __typename, global::System.Int32? gamesId = default !, global::System.String? name = default !, global::System.Double? price = default !, global::PrelastLab.Client.State.GenreData? genre = default !, global::PrelastLab.Client.State.DevelopersData? developer = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GamesId = gamesId;
            Name = name;
            Price = price;
            Genre = genre;
            Developer = developer;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? GamesId { get; }

        public global::System.String? Name { get; }

        public global::System.Double? Price { get; }

        public global::PrelastLab.Client.State.GenreData? Genre { get; }

        public global::PrelastLab.Client.State.DevelopersData? Developer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GenreData
    {
        public GenreData(global::System.String __typename, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DevelopersData
    {
        public DevelopersData(global::System.String __typename, global::System.String? name = default !, global::System.String? country = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Country = country;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? Country { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConferenceClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ConferenceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
